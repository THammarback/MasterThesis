-- -------------------------------------------------------------
-- 
-- File Name: E:\Downloads\2021b-10mayFINAL\2021b-10mayFINAL\srcFiles\request_buffer\hdlsrc\request_buffer_test\find_ti_index.vhd
-- Created: 2022-05-13 16:42:37
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: find_ti_index
-- Source Path: request_buffer_test/request_buffer/request_orderer/ts_ctrl/find_ti_index
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.request_buffer_pkg.ALL;

ENTITY find_ti_index IS
  PORT( ts                                :   IN    vector_of_std_logic_vector32(0 TO 63);  -- uint32 [64]
        ti                                :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        address                           :   OUT   std_logic_vector(5 DOWNTO 0);  -- ufix6
        valid                             :   OUT   std_logic
        );
END find_ti_index;


ARCHITECTURE rtl OF find_ti_index IS

  -- Component Declarations
  COMPONENT find_ti
    GENERIC( iter                         : integer
             );
    PORT( ts                              :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          ti                              :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          address                         :   OUT   std_logic_vector(5 DOWNTO 0);  -- ufix6
          any                             :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Max_block
    PORT( in0                             :   IN    vector_of_std_logic_vector6(0 TO 63);  -- ufix6 [64]
          out0                            :   OUT   std_logic_vector(5 DOWNTO 0)  -- ufix6
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : find_ti
    USE ENTITY work.find_ti(rtl);

  FOR ALL : Max_block
    USE ENTITY work.Max_block(rtl);

  -- Signals
  SIGNAL Equal_out1_0                     : std_logic;
  SIGNAL Equal_out1_1                     : std_logic;
  SIGNAL Equal_out1_2                     : std_logic;
  SIGNAL Equal_out1_3                     : std_logic;
  SIGNAL Equal_out1_4                     : std_logic;
  SIGNAL Equal_out1_5                     : std_logic;
  SIGNAL Equal_out1_6                     : std_logic;
  SIGNAL Equal_out1_7                     : std_logic;
  SIGNAL Equal_out1_8                     : std_logic;
  SIGNAL Equal_out1_9                     : std_logic;
  SIGNAL Equal_out1_10                    : std_logic;
  SIGNAL Equal_out1_11                    : std_logic;
  SIGNAL Equal_out1_12                    : std_logic;
  SIGNAL Equal_out1_13                    : std_logic;
  SIGNAL Equal_out1_14                    : std_logic;
  SIGNAL Equal_out1_15                    : std_logic;
  SIGNAL Equal_out1_16                    : std_logic;
  SIGNAL Equal_out1_17                    : std_logic;
  SIGNAL Equal_out1_18                    : std_logic;
  SIGNAL Equal_out1_19                    : std_logic;
  SIGNAL Equal_out1_20                    : std_logic;
  SIGNAL Equal_out1_21                    : std_logic;
  SIGNAL Equal_out1_22                    : std_logic;
  SIGNAL Equal_out1_23                    : std_logic;
  SIGNAL Equal_out1_24                    : std_logic;
  SIGNAL Equal_out1_25                    : std_logic;
  SIGNAL Equal_out1_26                    : std_logic;
  SIGNAL Equal_out1_27                    : std_logic;
  SIGNAL Equal_out1_28                    : std_logic;
  SIGNAL Equal_out1_29                    : std_logic;
  SIGNAL Equal_out1_30                    : std_logic;
  SIGNAL Equal_out1_31                    : std_logic;
  SIGNAL Equal_out1_32                    : std_logic;
  SIGNAL Equal_out1_33                    : std_logic;
  SIGNAL Equal_out1_34                    : std_logic;
  SIGNAL Equal_out1_35                    : std_logic;
  SIGNAL Equal_out1_36                    : std_logic;
  SIGNAL Equal_out1_37                    : std_logic;
  SIGNAL Equal_out1_38                    : std_logic;
  SIGNAL Equal_out1_39                    : std_logic;
  SIGNAL Equal_out1_40                    : std_logic;
  SIGNAL Equal_out1_41                    : std_logic;
  SIGNAL Equal_out1_42                    : std_logic;
  SIGNAL Equal_out1_43                    : std_logic;
  SIGNAL Equal_out1_44                    : std_logic;
  SIGNAL Equal_out1_45                    : std_logic;
  SIGNAL Equal_out1_46                    : std_logic;
  SIGNAL Equal_out1_47                    : std_logic;
  SIGNAL Equal_out1_48                    : std_logic;
  SIGNAL Equal_out1_49                    : std_logic;
  SIGNAL Equal_out1_50                    : std_logic;
  SIGNAL Equal_out1_51                    : std_logic;
  SIGNAL Equal_out1_52                    : std_logic;
  SIGNAL Equal_out1_53                    : std_logic;
  SIGNAL Equal_out1_54                    : std_logic;
  SIGNAL Equal_out1_55                    : std_logic;
  SIGNAL Equal_out1_56                    : std_logic;
  SIGNAL Equal_out1_57                    : std_logic;
  SIGNAL Equal_out1_58                    : std_logic;
  SIGNAL Equal_out1_59                    : std_logic;
  SIGNAL Equal_out1_60                    : std_logic;
  SIGNAL Equal_out1_61                    : std_logic;
  SIGNAL Equal_out1_62                    : std_logic;
  SIGNAL Equal_out1_63                    : std_logic;
  SIGNAL find_ti_out1                     : vector_of_std_logic_vector6(0 TO 63);  -- ufix6 [64]
  SIGNAL Max_out1                         : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL OR_out1                          : std_logic;

BEGIN
  u_find_ti_instance1 : find_ti
    GENERIC MAP( iter => 0
                 )
    PORT MAP( ts => ts(0),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(0),  -- ufix6
              any => Equal_out1_0
              );

  u_find_ti_instance2 : find_ti
    GENERIC MAP( iter => 1
                 )
    PORT MAP( ts => ts(1),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(1),  -- ufix6
              any => Equal_out1_1
              );

  u_find_ti_instance3 : find_ti
    GENERIC MAP( iter => 2
                 )
    PORT MAP( ts => ts(2),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(2),  -- ufix6
              any => Equal_out1_2
              );

  u_find_ti_instance4 : find_ti
    GENERIC MAP( iter => 3
                 )
    PORT MAP( ts => ts(3),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(3),  -- ufix6
              any => Equal_out1_3
              );

  u_find_ti_instance5 : find_ti
    GENERIC MAP( iter => 4
                 )
    PORT MAP( ts => ts(4),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(4),  -- ufix6
              any => Equal_out1_4
              );

  u_find_ti_instance6 : find_ti
    GENERIC MAP( iter => 5
                 )
    PORT MAP( ts => ts(5),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(5),  -- ufix6
              any => Equal_out1_5
              );

  u_find_ti_instance7 : find_ti
    GENERIC MAP( iter => 6
                 )
    PORT MAP( ts => ts(6),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(6),  -- ufix6
              any => Equal_out1_6
              );

  u_find_ti_instance8 : find_ti
    GENERIC MAP( iter => 7
                 )
    PORT MAP( ts => ts(7),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(7),  -- ufix6
              any => Equal_out1_7
              );

  u_find_ti_instance9 : find_ti
    GENERIC MAP( iter => 8
                 )
    PORT MAP( ts => ts(8),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(8),  -- ufix6
              any => Equal_out1_8
              );

  u_find_ti_instance10 : find_ti
    GENERIC MAP( iter => 9
                 )
    PORT MAP( ts => ts(9),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(9),  -- ufix6
              any => Equal_out1_9
              );

  u_find_ti_instance11 : find_ti
    GENERIC MAP( iter => 10
                 )
    PORT MAP( ts => ts(10),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(10),  -- ufix6
              any => Equal_out1_10
              );

  u_find_ti_instance12 : find_ti
    GENERIC MAP( iter => 11
                 )
    PORT MAP( ts => ts(11),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(11),  -- ufix6
              any => Equal_out1_11
              );

  u_find_ti_instance13 : find_ti
    GENERIC MAP( iter => 12
                 )
    PORT MAP( ts => ts(12),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(12),  -- ufix6
              any => Equal_out1_12
              );

  u_find_ti_instance14 : find_ti
    GENERIC MAP( iter => 13
                 )
    PORT MAP( ts => ts(13),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(13),  -- ufix6
              any => Equal_out1_13
              );

  u_find_ti_instance15 : find_ti
    GENERIC MAP( iter => 14
                 )
    PORT MAP( ts => ts(14),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(14),  -- ufix6
              any => Equal_out1_14
              );

  u_find_ti_instance16 : find_ti
    GENERIC MAP( iter => 15
                 )
    PORT MAP( ts => ts(15),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(15),  -- ufix6
              any => Equal_out1_15
              );

  u_find_ti_instance17 : find_ti
    GENERIC MAP( iter => 16
                 )
    PORT MAP( ts => ts(16),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(16),  -- ufix6
              any => Equal_out1_16
              );

  u_find_ti_instance18 : find_ti
    GENERIC MAP( iter => 17
                 )
    PORT MAP( ts => ts(17),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(17),  -- ufix6
              any => Equal_out1_17
              );

  u_find_ti_instance19 : find_ti
    GENERIC MAP( iter => 18
                 )
    PORT MAP( ts => ts(18),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(18),  -- ufix6
              any => Equal_out1_18
              );

  u_find_ti_instance20 : find_ti
    GENERIC MAP( iter => 19
                 )
    PORT MAP( ts => ts(19),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(19),  -- ufix6
              any => Equal_out1_19
              );

  u_find_ti_instance21 : find_ti
    GENERIC MAP( iter => 20
                 )
    PORT MAP( ts => ts(20),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(20),  -- ufix6
              any => Equal_out1_20
              );

  u_find_ti_instance22 : find_ti
    GENERIC MAP( iter => 21
                 )
    PORT MAP( ts => ts(21),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(21),  -- ufix6
              any => Equal_out1_21
              );

  u_find_ti_instance23 : find_ti
    GENERIC MAP( iter => 22
                 )
    PORT MAP( ts => ts(22),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(22),  -- ufix6
              any => Equal_out1_22
              );

  u_find_ti_instance24 : find_ti
    GENERIC MAP( iter => 23
                 )
    PORT MAP( ts => ts(23),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(23),  -- ufix6
              any => Equal_out1_23
              );

  u_find_ti_instance25 : find_ti
    GENERIC MAP( iter => 24
                 )
    PORT MAP( ts => ts(24),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(24),  -- ufix6
              any => Equal_out1_24
              );

  u_find_ti_instance26 : find_ti
    GENERIC MAP( iter => 25
                 )
    PORT MAP( ts => ts(25),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(25),  -- ufix6
              any => Equal_out1_25
              );

  u_find_ti_instance27 : find_ti
    GENERIC MAP( iter => 26
                 )
    PORT MAP( ts => ts(26),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(26),  -- ufix6
              any => Equal_out1_26
              );

  u_find_ti_instance28 : find_ti
    GENERIC MAP( iter => 27
                 )
    PORT MAP( ts => ts(27),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(27),  -- ufix6
              any => Equal_out1_27
              );

  u_find_ti_instance29 : find_ti
    GENERIC MAP( iter => 28
                 )
    PORT MAP( ts => ts(28),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(28),  -- ufix6
              any => Equal_out1_28
              );

  u_find_ti_instance30 : find_ti
    GENERIC MAP( iter => 29
                 )
    PORT MAP( ts => ts(29),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(29),  -- ufix6
              any => Equal_out1_29
              );

  u_find_ti_instance31 : find_ti
    GENERIC MAP( iter => 30
                 )
    PORT MAP( ts => ts(30),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(30),  -- ufix6
              any => Equal_out1_30
              );

  u_find_ti_instance32 : find_ti
    GENERIC MAP( iter => 31
                 )
    PORT MAP( ts => ts(31),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(31),  -- ufix6
              any => Equal_out1_31
              );

  u_find_ti_instance33 : find_ti
    GENERIC MAP( iter => 32
                 )
    PORT MAP( ts => ts(32),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(32),  -- ufix6
              any => Equal_out1_32
              );

  u_find_ti_instance34 : find_ti
    GENERIC MAP( iter => 33
                 )
    PORT MAP( ts => ts(33),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(33),  -- ufix6
              any => Equal_out1_33
              );

  u_find_ti_instance35 : find_ti
    GENERIC MAP( iter => 34
                 )
    PORT MAP( ts => ts(34),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(34),  -- ufix6
              any => Equal_out1_34
              );

  u_find_ti_instance36 : find_ti
    GENERIC MAP( iter => 35
                 )
    PORT MAP( ts => ts(35),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(35),  -- ufix6
              any => Equal_out1_35
              );

  u_find_ti_instance37 : find_ti
    GENERIC MAP( iter => 36
                 )
    PORT MAP( ts => ts(36),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(36),  -- ufix6
              any => Equal_out1_36
              );

  u_find_ti_instance38 : find_ti
    GENERIC MAP( iter => 37
                 )
    PORT MAP( ts => ts(37),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(37),  -- ufix6
              any => Equal_out1_37
              );

  u_find_ti_instance39 : find_ti
    GENERIC MAP( iter => 38
                 )
    PORT MAP( ts => ts(38),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(38),  -- ufix6
              any => Equal_out1_38
              );

  u_find_ti_instance40 : find_ti
    GENERIC MAP( iter => 39
                 )
    PORT MAP( ts => ts(39),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(39),  -- ufix6
              any => Equal_out1_39
              );

  u_find_ti_instance41 : find_ti
    GENERIC MAP( iter => 40
                 )
    PORT MAP( ts => ts(40),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(40),  -- ufix6
              any => Equal_out1_40
              );

  u_find_ti_instance42 : find_ti
    GENERIC MAP( iter => 41
                 )
    PORT MAP( ts => ts(41),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(41),  -- ufix6
              any => Equal_out1_41
              );

  u_find_ti_instance43 : find_ti
    GENERIC MAP( iter => 42
                 )
    PORT MAP( ts => ts(42),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(42),  -- ufix6
              any => Equal_out1_42
              );

  u_find_ti_instance44 : find_ti
    GENERIC MAP( iter => 43
                 )
    PORT MAP( ts => ts(43),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(43),  -- ufix6
              any => Equal_out1_43
              );

  u_find_ti_instance45 : find_ti
    GENERIC MAP( iter => 44
                 )
    PORT MAP( ts => ts(44),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(44),  -- ufix6
              any => Equal_out1_44
              );

  u_find_ti_instance46 : find_ti
    GENERIC MAP( iter => 45
                 )
    PORT MAP( ts => ts(45),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(45),  -- ufix6
              any => Equal_out1_45
              );

  u_find_ti_instance47 : find_ti
    GENERIC MAP( iter => 46
                 )
    PORT MAP( ts => ts(46),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(46),  -- ufix6
              any => Equal_out1_46
              );

  u_find_ti_instance48 : find_ti
    GENERIC MAP( iter => 47
                 )
    PORT MAP( ts => ts(47),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(47),  -- ufix6
              any => Equal_out1_47
              );

  u_find_ti_instance49 : find_ti
    GENERIC MAP( iter => 48
                 )
    PORT MAP( ts => ts(48),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(48),  -- ufix6
              any => Equal_out1_48
              );

  u_find_ti_instance50 : find_ti
    GENERIC MAP( iter => 49
                 )
    PORT MAP( ts => ts(49),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(49),  -- ufix6
              any => Equal_out1_49
              );

  u_find_ti_instance51 : find_ti
    GENERIC MAP( iter => 50
                 )
    PORT MAP( ts => ts(50),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(50),  -- ufix6
              any => Equal_out1_50
              );

  u_find_ti_instance52 : find_ti
    GENERIC MAP( iter => 51
                 )
    PORT MAP( ts => ts(51),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(51),  -- ufix6
              any => Equal_out1_51
              );

  u_find_ti_instance53 : find_ti
    GENERIC MAP( iter => 52
                 )
    PORT MAP( ts => ts(52),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(52),  -- ufix6
              any => Equal_out1_52
              );

  u_find_ti_instance54 : find_ti
    GENERIC MAP( iter => 53
                 )
    PORT MAP( ts => ts(53),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(53),  -- ufix6
              any => Equal_out1_53
              );

  u_find_ti_instance55 : find_ti
    GENERIC MAP( iter => 54
                 )
    PORT MAP( ts => ts(54),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(54),  -- ufix6
              any => Equal_out1_54
              );

  u_find_ti_instance56 : find_ti
    GENERIC MAP( iter => 55
                 )
    PORT MAP( ts => ts(55),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(55),  -- ufix6
              any => Equal_out1_55
              );

  u_find_ti_instance57 : find_ti
    GENERIC MAP( iter => 56
                 )
    PORT MAP( ts => ts(56),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(56),  -- ufix6
              any => Equal_out1_56
              );

  u_find_ti_instance58 : find_ti
    GENERIC MAP( iter => 57
                 )
    PORT MAP( ts => ts(57),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(57),  -- ufix6
              any => Equal_out1_57
              );

  u_find_ti_instance59 : find_ti
    GENERIC MAP( iter => 58
                 )
    PORT MAP( ts => ts(58),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(58),  -- ufix6
              any => Equal_out1_58
              );

  u_find_ti_instance60 : find_ti
    GENERIC MAP( iter => 59
                 )
    PORT MAP( ts => ts(59),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(59),  -- ufix6
              any => Equal_out1_59
              );

  u_find_ti_instance61 : find_ti
    GENERIC MAP( iter => 60
                 )
    PORT MAP( ts => ts(60),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(60),  -- ufix6
              any => Equal_out1_60
              );

  u_find_ti_instance62 : find_ti
    GENERIC MAP( iter => 61
                 )
    PORT MAP( ts => ts(61),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(61),  -- ufix6
              any => Equal_out1_61
              );

  u_find_ti_instance63 : find_ti
    GENERIC MAP( iter => 62
                 )
    PORT MAP( ts => ts(62),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(62),  -- ufix6
              any => Equal_out1_62
              );

  u_find_ti_instance64 : find_ti
    GENERIC MAP( iter => 63
                 )
    PORT MAP( ts => ts(63),  -- uint32
              ti => ti,  -- uint16
              address => find_ti_out1(63),  -- ufix6
              any => Equal_out1_63
              );

  u_Max : Max_block
    PORT MAP( in0 => find_ti_out1,  -- ufix6 [64]
              out0 => Max_out1  -- ufix6
              );


  OR_rsvd_output : PROCESS (Equal_out1_0, Equal_out1_1, Equal_out1_10, Equal_out1_11, Equal_out1_12,
       Equal_out1_13, Equal_out1_14, Equal_out1_15, Equal_out1_16,
       Equal_out1_17, Equal_out1_18, Equal_out1_19, Equal_out1_2, Equal_out1_20,
       Equal_out1_21, Equal_out1_22, Equal_out1_23, Equal_out1_24,
       Equal_out1_25, Equal_out1_26, Equal_out1_27, Equal_out1_28,
       Equal_out1_29, Equal_out1_3, Equal_out1_30, Equal_out1_31, Equal_out1_32,
       Equal_out1_33, Equal_out1_34, Equal_out1_35, Equal_out1_36,
       Equal_out1_37, Equal_out1_38, Equal_out1_39, Equal_out1_4, Equal_out1_40,
       Equal_out1_41, Equal_out1_42, Equal_out1_43, Equal_out1_44,
       Equal_out1_45, Equal_out1_46, Equal_out1_47, Equal_out1_48,
       Equal_out1_49, Equal_out1_5, Equal_out1_50, Equal_out1_51, Equal_out1_52,
       Equal_out1_53, Equal_out1_54, Equal_out1_55, Equal_out1_56,
       Equal_out1_57, Equal_out1_58, Equal_out1_59, Equal_out1_6, Equal_out1_60,
       Equal_out1_61, Equal_out1_62, Equal_out1_63, Equal_out1_7, Equal_out1_8,
       Equal_out1_9)
    VARIABLE t : std_logic;
  BEGIN
    t := Equal_out1_16 OR (Equal_out1_15 OR (Equal_out1_14 OR (Equal_out1_13 OR (Equal_out1_12 OR (Equal_out1_11 OR (Equal_out1_10 OR (Equal_out1_9 OR (Equal_out1_8 OR (Equal_out1_7 OR (Equal_out1_6 OR (Equal_out1_5 OR (Equal_out1_4 OR (Equal_out1_3 OR (Equal_out1_2 OR (Equal_out1_0 OR Equal_out1_1)))))))))))))));
    t := Equal_out1_17 OR t;
    t := Equal_out1_18 OR t;
    t := Equal_out1_19 OR t;
    t := Equal_out1_20 OR t;
    t := Equal_out1_21 OR t;
    t := Equal_out1_22 OR t;
    t := Equal_out1_23 OR t;
    t := Equal_out1_24 OR t;
    t := Equal_out1_25 OR t;
    t := Equal_out1_26 OR t;
    t := Equal_out1_27 OR t;
    t := Equal_out1_28 OR t;
    t := Equal_out1_29 OR t;
    t := Equal_out1_30 OR t;
    t := Equal_out1_31 OR t;
    t := Equal_out1_32 OR t;
    t := Equal_out1_33 OR t;
    t := Equal_out1_34 OR t;
    t := Equal_out1_35 OR t;
    t := Equal_out1_36 OR t;
    t := Equal_out1_37 OR t;
    t := Equal_out1_38 OR t;
    t := Equal_out1_39 OR t;
    t := Equal_out1_40 OR t;
    t := Equal_out1_41 OR t;
    t := Equal_out1_42 OR t;
    t := Equal_out1_43 OR t;
    t := Equal_out1_44 OR t;
    t := Equal_out1_45 OR t;
    t := Equal_out1_46 OR t;
    t := Equal_out1_47 OR t;
    t := Equal_out1_48 OR t;
    t := Equal_out1_49 OR t;
    t := Equal_out1_50 OR t;
    t := Equal_out1_51 OR t;
    t := Equal_out1_52 OR t;
    t := Equal_out1_53 OR t;
    t := Equal_out1_54 OR t;
    t := Equal_out1_55 OR t;
    t := Equal_out1_56 OR t;
    t := Equal_out1_57 OR t;
    t := Equal_out1_58 OR t;
    t := Equal_out1_59 OR t;
    t := Equal_out1_60 OR t;
    t := Equal_out1_61 OR t;
    t := Equal_out1_62 OR t;
    t := Equal_out1_63 OR t;
    OR_out1 <= t;
  END PROCESS OR_rsvd_output;


  address <= Max_out1;

  valid <= OR_out1;

END rtl;


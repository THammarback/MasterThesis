-- -------------------------------------------------------------
-- 

-- File Name: E:\Downloads\2021b-10mayFINAL\2021b-10mayFINAL\srcFiles\DIG_IF\hdlsrc\DIG_IF_test\filter_block.vhd
-- Created: 2022-05-10 17:23:04
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: filter_block
-- Source Path: DIG_IF_test/DIG_IF/ul_filter/filters/filter
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY filter_block IS
  PORT( clk                               :   IN    std_logic;
        stream_in_re                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        stream_in_im                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        s_1                               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        a_2_1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        a_3_1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        b_2_1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        b_3_1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        s_2                               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        a_2_2                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        a_3_2                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        b_2_2                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        b_3_2                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        stream_out_re                     :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        stream_out_im                     :   OUT   std_logic_vector(23 DOWNTO 0)  -- ufix24
        );
END filter_block;


ARCHITECTURE rtl OF filter_block IS

  -- Signals
  SIGNAL stream_in_re_unsigned            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL stream_in_im_unsigned            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL s_1_unsigned                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL ss_1_Re                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL ss_1_Im                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL a_2_1_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL a_3_1_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay21_out1_im                  : unsigned(15 DOWNTO 0) := to_unsigned(16#0000#, 16);  -- uint16
  SIGNAL aa_3_1_Im                        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Delay11_out1_re                  : unsigned(15 DOWNTO 0) := to_unsigned(16#0000#, 16);  -- uint16
  SIGNAL Delay11_out1_im                  : unsigned(15 DOWNTO 0) := to_unsigned(16#0000#, 16);  -- uint16
  SIGNAL Delay21_out1_re                  : unsigned(15 DOWNTO 0) := to_unsigned(16#0000#, 16);  -- uint16
  SIGNAL aa_3_1_Re                        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL aa_2_1_Im                        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL SumA31_out1_re                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL SumA31_out1_im                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL aa_2_1_Re                        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL SumA21_sub_temp                  : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL SumA21_sub_temp_1                : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL SumA21_out1_re                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL SumA21_out1_im                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL SumA31_sub_temp                  : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL SumA31_sub_temp_1                : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL b_2_1_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bb_2_1_Re                        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL bb_2_1_Im                        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL SumB21_add_temp                  : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL SumB21_add_temp_1                : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL SumB21_out1_re                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL SumB21_out1_im                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL b_3_1_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bb_3_1_Re                        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL bb_3_1_Im                        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL SumB31_add_temp                  : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL SumB31_add_temp_1                : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL SumB31_out1_re                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL SumB31_out1_im                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL s_2_unsigned                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL ss_2_Re                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL ss_2_Im                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL a_2_2_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL a_3_2_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_im                   : unsigned(23 DOWNTO 0) := to_unsigned(16#000000#, 24);  -- ufix24
  SIGNAL aa_3_2_Im                        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay1_out1_re                   : unsigned(23 DOWNTO 0) := to_unsigned(16#000000#, 24);  -- ufix24
  SIGNAL Delay1_out1_im                   : unsigned(23 DOWNTO 0) := to_unsigned(16#000000#, 24);  -- ufix24
  SIGNAL Delay2_out1_re                   : unsigned(23 DOWNTO 0) := to_unsigned(16#000000#, 24);  -- ufix24
  SIGNAL aa_3_2_Re                        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL aa_2_2_Im                        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL SumA2_out1_re                    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL SumA2_out1_im                    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL aa_2_2_Re                        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL SumA1_sub_temp                   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL SumA1_sub_temp_1                 : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL SumA1_out1_re                    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL SumA1_out1_im                    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL SumA2_sub_temp                   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL SumA2_sub_temp_1                 : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL b_3_2_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bb_2_2_Re                        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL bb_2_2_Im                        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL SumB1_add_temp                   : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL SumB1_add_temp_1                 : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL SumB1_out1_re                    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL SumB1_out1_im                    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL b_2_2_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bb_3_2_Re                        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL bb_3_2_Im                        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL SumB2_add_temp                   : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL SumB2_add_temp_1                 : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL SumB2_out1_re                    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL SumB2_out1_im                    : unsigned(23 DOWNTO 0);  -- ufix24

BEGIN
  stream_in_re_unsigned <= unsigned(stream_in_re);

  s_1_unsigned <= unsigned(s_1);

  ss_1_Re <= stream_in_re_unsigned * s_1_unsigned;

  stream_in_im_unsigned <= unsigned(stream_in_im);

  ss_1_Im <= stream_in_im_unsigned * s_1_unsigned;

  a_2_1_unsigned <= unsigned(a_2_1);

  a_3_1_unsigned <= unsigned(a_3_1);

  aa_3_1_Im <= Delay21_out1_im * a_3_1_unsigned;

  Delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      Delay21_out1_re <= Delay11_out1_re;
      Delay21_out1_im <= Delay11_out1_im;
    END IF;
  END PROCESS Delay21_process;


  aa_3_1_Re <= Delay21_out1_re * a_3_1_unsigned;

  aa_2_1_Im <= Delay11_out1_im * a_2_1_unsigned;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      Delay11_out1_re <= SumA31_out1_re;
      Delay11_out1_im <= SumA31_out1_im;
    END IF;
  END PROCESS Delay11_process;


  aa_2_1_Re <= Delay11_out1_re * a_2_1_unsigned;

  SumA21_sub_temp <= signed(resize(ss_1_Re, 25)) - signed(resize(aa_2_1_Re, 25));
  
  SumA21_out1_re <= X"FFFF" WHEN (SumA21_sub_temp(24) = '0') AND (SumA21_sub_temp(23 DOWNTO 16) /= 
    "00000000") ELSE
      X"0000" WHEN SumA21_sub_temp(24) = '1' ELSE
      unsigned(SumA21_sub_temp(15 DOWNTO 0));
  SumA21_sub_temp_1 <= signed(resize(ss_1_Im, 25)) - signed(resize(aa_2_1_Im, 25));
  
  SumA21_out1_im <= X"FFFF" WHEN (SumA21_sub_temp_1(24) = '0') AND (SumA21_sub_temp_1(23 DOWNTO 16) /= 
    "00000000") ELSE
      X"0000" WHEN SumA21_sub_temp_1(24) = '1' ELSE
      unsigned(SumA21_sub_temp_1(15 DOWNTO 0));

  SumA31_sub_temp <= signed(resize(SumA21_out1_re, 25)) - signed(resize(aa_3_1_Re, 25));
  
  SumA31_out1_re <= X"FFFF" WHEN (SumA31_sub_temp(24) = '0') AND (SumA31_sub_temp(23 DOWNTO 16) /= 
    "00000000") ELSE
      X"0000" WHEN SumA31_sub_temp(24) = '1' ELSE
      unsigned(SumA31_sub_temp(15 DOWNTO 0));
  SumA31_sub_temp_1 <= signed(resize(SumA21_out1_im, 25)) - signed(resize(aa_3_1_Im, 25));
  
  SumA31_out1_im <= X"FFFF" WHEN (SumA31_sub_temp_1(24) = '0') AND (SumA31_sub_temp_1(23 DOWNTO 16) /= 
    "00000000") ELSE
      X"0000" WHEN SumA31_sub_temp_1(24) = '1' ELSE
      unsigned(SumA31_sub_temp_1(15 DOWNTO 0));

  b_2_1_unsigned <= unsigned(b_2_1);

  bb_2_1_Re <= Delay11_out1_re * b_2_1_unsigned;

  bb_2_1_Im <= Delay11_out1_im * b_2_1_unsigned;

  SumB21_add_temp <= resize(SumA31_out1_re, 25) + resize(bb_2_1_Re, 25);
  
  SumB21_out1_re <= X"FFFF" WHEN SumB21_add_temp(24 DOWNTO 16) /= "000000000" ELSE
      SumB21_add_temp(15 DOWNTO 0);
  SumB21_add_temp_1 <= resize(SumA31_out1_im, 25) + resize(bb_2_1_Im, 25);
  
  SumB21_out1_im <= X"FFFF" WHEN SumB21_add_temp_1(24 DOWNTO 16) /= "000000000" ELSE
      SumB21_add_temp_1(15 DOWNTO 0);

  b_3_1_unsigned <= unsigned(b_3_1);

  bb_3_1_Re <= Delay21_out1_re * b_3_1_unsigned;

  bb_3_1_Im <= Delay21_out1_im * b_3_1_unsigned;

  SumB31_add_temp <= resize(SumB21_out1_re, 25) + resize(bb_3_1_Re, 25);
  
  SumB31_out1_re <= X"FFFF" WHEN SumB31_add_temp(24 DOWNTO 16) /= "000000000" ELSE
      SumB31_add_temp(15 DOWNTO 0);
  SumB31_add_temp_1 <= resize(SumB21_out1_im, 25) + resize(bb_3_1_Im, 25);
  
  SumB31_out1_im <= X"FFFF" WHEN SumB31_add_temp_1(24 DOWNTO 16) /= "000000000" ELSE
      SumB31_add_temp_1(15 DOWNTO 0);

  s_2_unsigned <= unsigned(s_2);

  ss_2_Re <= SumB31_out1_re * s_2_unsigned;

  ss_2_Im <= SumB31_out1_im * s_2_unsigned;

  a_2_2_unsigned <= unsigned(a_2_2);

  a_3_2_unsigned <= unsigned(a_3_2);

  aa_3_2_Im <= Delay2_out1_im * a_3_2_unsigned;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      Delay2_out1_re <= Delay1_out1_re;
      Delay2_out1_im <= Delay1_out1_im;
    END IF;
  END PROCESS Delay2_process;


  aa_3_2_Re <= Delay2_out1_re * a_3_2_unsigned;

  aa_2_2_Im <= Delay1_out1_im * a_2_2_unsigned;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      Delay1_out1_re <= SumA2_out1_re;
      Delay1_out1_im <= SumA2_out1_im;
    END IF;
  END PROCESS Delay1_process;


  aa_2_2_Re <= Delay1_out1_re * a_2_2_unsigned;

  SumA1_sub_temp <= signed(resize(ss_2_Re, 33)) - signed(resize(aa_2_2_Re, 33));
  
  SumA1_out1_re <= X"FFFFFF" WHEN (SumA1_sub_temp(32) = '0') AND (SumA1_sub_temp(31 DOWNTO 24) /= "00000000") 
    ELSE
      X"000000" WHEN SumA1_sub_temp(32) = '1' ELSE
      unsigned(SumA1_sub_temp(23 DOWNTO 0));
  SumA1_sub_temp_1 <= signed(resize(ss_2_Im, 33)) - signed(resize(aa_2_2_Im, 33));
  
  SumA1_out1_im <= X"FFFFFF" WHEN (SumA1_sub_temp_1(32) = '0') AND (SumA1_sub_temp_1(31 DOWNTO 24) /= 
    "00000000") ELSE
      X"000000" WHEN SumA1_sub_temp_1(32) = '1' ELSE
      unsigned(SumA1_sub_temp_1(23 DOWNTO 0));

  SumA2_sub_temp <= signed(resize(SumA1_out1_re, 33)) - signed(resize(aa_3_2_Re, 33));
  
  SumA2_out1_re <= X"FFFFFF" WHEN (SumA2_sub_temp(32) = '0') AND (SumA2_sub_temp(31 DOWNTO 24) /= "00000000") 
    ELSE
      X"000000" WHEN SumA2_sub_temp(32) = '1' ELSE
      unsigned(SumA2_sub_temp(23 DOWNTO 0));
  SumA2_sub_temp_1 <= signed(resize(SumA1_out1_im, 33)) - signed(resize(aa_3_2_Im, 33));
  
  SumA2_out1_im <= X"FFFFFF" WHEN (SumA2_sub_temp_1(32) = '0') AND (SumA2_sub_temp_1(31 DOWNTO 24) /= 
    "00000000") ELSE
      X"000000" WHEN SumA2_sub_temp_1(32) = '1' ELSE
      unsigned(SumA2_sub_temp_1(23 DOWNTO 0));

  b_3_2_unsigned <= unsigned(b_3_2);

  bb_2_2_Re <= Delay1_out1_re * b_3_2_unsigned;

  bb_2_2_Im <= Delay1_out1_im * b_3_2_unsigned;

  SumB1_add_temp <= resize(SumA2_out1_re, 33) + resize(bb_2_2_Re, 33);
  
  SumB1_out1_re <= X"FFFFFF" WHEN SumB1_add_temp(32 DOWNTO 24) /= "000000000" ELSE
      SumB1_add_temp(23 DOWNTO 0);
  SumB1_add_temp_1 <= resize(SumA2_out1_im, 33) + resize(bb_2_2_Im, 33);
  
  SumB1_out1_im <= X"FFFFFF" WHEN SumB1_add_temp_1(32 DOWNTO 24) /= "000000000" ELSE
      SumB1_add_temp_1(23 DOWNTO 0);

  b_2_2_unsigned <= unsigned(b_2_2);

  bb_3_2_Re <= Delay2_out1_re * b_2_2_unsigned;

  bb_3_2_Im <= Delay2_out1_im * b_2_2_unsigned;

  SumB2_add_temp <= resize(SumB1_out1_re, 33) + resize(bb_3_2_Re, 33);
  
  SumB2_out1_re <= X"FFFFFF" WHEN SumB2_add_temp(32 DOWNTO 24) /= "000000000" ELSE
      SumB2_add_temp(23 DOWNTO 0);
  SumB2_add_temp_1 <= resize(SumB1_out1_im, 33) + resize(bb_3_2_Im, 33);
  
  SumB2_out1_im <= X"FFFFFF" WHEN SumB2_add_temp_1(32 DOWNTO 24) /= "000000000" ELSE
      SumB2_add_temp_1(23 DOWNTO 0);

  stream_out_re <= std_logic_vector(SumB2_out1_re);

  stream_out_im <= std_logic_vector(SumB2_out1_im);

END rtl;


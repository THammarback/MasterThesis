-- -------------------------------------------------------------
-- 

-- File Name: E:\Downloads\2021b-10mayFINAL\2021b-10mayFINAL\srcFiles\DIG_IF\hdlsrc\DIG_IF_test\find_ti_index.vhd
-- Created: 2022-05-10 17:23:04
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: find_ti_index
-- Source Path: DIG_IF_test/DIG_IF/request_buffer/request_orderer/ts_ctrl/find_ti_index
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DIG_IF_pac.ALL;

ENTITY find_ti_index IS
  PORT( ts                                :   IN    vector_of_std_logic_vector32(0 TO 63);  -- uint32 [64]
        ti                                :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        address                           :   OUT   std_logic_vector(5 DOWNTO 0);  -- ufix6
        valid                             :   OUT   std_logic
        );
END find_ti_index;


ARCHITECTURE rtl OF find_ti_index IS

  -- Component Declarations
  COMPONENT find_ti
    GENERIC( iter                         : integer
             );
    PORT( ts                              :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          ti                              :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          address                         :   OUT   std_logic_vector(5 DOWNTO 0);  -- ufix6
          any                             :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : find_ti
    USE ENTITY work.find_ti(rtl);

  -- Signals
  SIGNAL Switch_out1_0                    : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_0                     : std_logic;
  SIGNAL Switch_out1_0_unsigned           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_1                    : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_1                     : std_logic;
  SIGNAL Switch_out1_2                    : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_2                     : std_logic;
  SIGNAL Switch_out1_2_unsigned           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_3                    : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_3                     : std_logic;
  SIGNAL Switch_out1_4                    : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_4                     : std_logic;
  SIGNAL Switch_out1_4_unsigned           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_5                    : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_5                     : std_logic;
  SIGNAL Switch_out1_6                    : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_6                     : std_logic;
  SIGNAL Switch_out1_6_unsigned           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_7                    : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_7                     : std_logic;
  SIGNAL Switch_out1_8                    : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_8                     : std_logic;
  SIGNAL Switch_out1_8_unsigned           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_9                    : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_9                     : std_logic;
  SIGNAL Switch_out1_10                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_10                    : std_logic;
  SIGNAL Switch_out1_10_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_11                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_11                    : std_logic;
  SIGNAL Switch_out1_12                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_12                    : std_logic;
  SIGNAL Switch_out1_12_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_13                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_13                    : std_logic;
  SIGNAL Switch_out1_14                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_14                    : std_logic;
  SIGNAL Switch_out1_14_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_15                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_15                    : std_logic;
  SIGNAL Switch_out1_16                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_16                    : std_logic;
  SIGNAL Switch_out1_16_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_17                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_17                    : std_logic;
  SIGNAL Switch_out1_18                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_18                    : std_logic;
  SIGNAL Switch_out1_18_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_19                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_19                    : std_logic;
  SIGNAL Switch_out1_20                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_20                    : std_logic;
  SIGNAL Switch_out1_20_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_21                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_21                    : std_logic;
  SIGNAL Switch_out1_22                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_22                    : std_logic;
  SIGNAL Switch_out1_22_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_23                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_23                    : std_logic;
  SIGNAL Switch_out1_24                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_24                    : std_logic;
  SIGNAL Switch_out1_24_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_25                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_25                    : std_logic;
  SIGNAL Switch_out1_26                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_26                    : std_logic;
  SIGNAL Switch_out1_26_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_27                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_27                    : std_logic;
  SIGNAL Switch_out1_28                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_28                    : std_logic;
  SIGNAL Switch_out1_28_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_29                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_29                    : std_logic;
  SIGNAL Switch_out1_30                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_30                    : std_logic;
  SIGNAL Switch_out1_30_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_31                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_31                    : std_logic;
  SIGNAL Switch_out1_32                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_32                    : std_logic;
  SIGNAL Switch_out1_32_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_33                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_33                    : std_logic;
  SIGNAL Switch_out1_34                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_34                    : std_logic;
  SIGNAL Switch_out1_34_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_35                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_35                    : std_logic;
  SIGNAL Switch_out1_36                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_36                    : std_logic;
  SIGNAL Switch_out1_36_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_37                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_37                    : std_logic;
  SIGNAL Switch_out1_38                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_38                    : std_logic;
  SIGNAL Switch_out1_38_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_39                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_39                    : std_logic;
  SIGNAL Switch_out1_40                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_40                    : std_logic;
  SIGNAL Switch_out1_40_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_41                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_41                    : std_logic;
  SIGNAL Switch_out1_42                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_42                    : std_logic;
  SIGNAL Switch_out1_42_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_43                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_43                    : std_logic;
  SIGNAL Switch_out1_44                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_44                    : std_logic;
  SIGNAL Switch_out1_44_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_45                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_45                    : std_logic;
  SIGNAL Switch_out1_46                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_46                    : std_logic;
  SIGNAL Switch_out1_46_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_47                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_47                    : std_logic;
  SIGNAL Switch_out1_48                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_48                    : std_logic;
  SIGNAL Switch_out1_48_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_49                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_49                    : std_logic;
  SIGNAL Switch_out1_50                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_50                    : std_logic;
  SIGNAL Switch_out1_50_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_51                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_51                    : std_logic;
  SIGNAL Switch_out1_52                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_52                    : std_logic;
  SIGNAL Switch_out1_52_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_53                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_53                    : std_logic;
  SIGNAL Switch_out1_54                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_54                    : std_logic;
  SIGNAL Switch_out1_54_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_55                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_55                    : std_logic;
  SIGNAL Switch_out1_56                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_56                    : std_logic;
  SIGNAL Switch_out1_56_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_57                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_57                    : std_logic;
  SIGNAL Switch_out1_58                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_58                    : std_logic;
  SIGNAL Switch_out1_58_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_59                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_59                    : std_logic;
  SIGNAL Switch_out1_60                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_60                    : std_logic;
  SIGNAL Switch_out1_60_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_61                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_61                    : std_logic;
  SIGNAL Switch_out1_62                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_62                    : std_logic;
  SIGNAL Switch_out1_62_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_63                   : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Equal_out1_63                    : std_logic;
  SIGNAL Switch_out1_1_unsigned           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_1_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_3_unsigned           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_2_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage2_1_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_5_unsigned           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_3_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_7_unsigned           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_4_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage2_2_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage3_1_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_9_unsigned           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_5_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_11_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_6_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage2_3_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_13_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_7_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_15_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_8_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage2_4_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage3_2_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage4_1_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_17_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_9_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_19_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_10_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage2_5_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_21_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_11_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_23_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_12_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage2_6_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage3_3_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_25_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_13_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_27_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_14_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage2_7_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_29_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_15_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_31_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_16_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage2_8_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage3_4_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage4_2_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage5_1_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_33_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_17_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_35_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_18_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage2_9_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_37_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_19_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_39_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_20_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage2_10_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage3_5_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_41_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_21_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_43_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_22_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage2_11_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_45_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_23_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_47_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_24_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage2_12_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage3_6_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage4_3_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_49_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_25_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_51_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_26_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage2_13_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_53_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_27_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_55_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_28_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage2_14_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage3_7_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_57_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_29_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_59_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_30_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage2_15_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_61_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_31_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Switch_out1_63_unsigned          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage1_32_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage2_16_val                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage3_8_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage4_4_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage5_2_val                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Max_stage6_val                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL OR_out1                          : std_logic;

BEGIN
  Ufind_ti_instance1 : find_ti
    GENERIC MAP( iter => 0
                 )
    PORT MAP( ts => ts(0),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_0,  -- ufix6
              any => Equal_out1_0
              );

  Ufind_ti_instance2 : find_ti
    GENERIC MAP( iter => 1
                 )
    PORT MAP( ts => ts(1),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_1,  -- ufix6
              any => Equal_out1_1
              );

  Ufind_ti_instance3 : find_ti
    GENERIC MAP( iter => 2
                 )
    PORT MAP( ts => ts(2),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_2,  -- ufix6
              any => Equal_out1_2
              );

  Ufind_ti_instance4 : find_ti
    GENERIC MAP( iter => 3
                 )
    PORT MAP( ts => ts(3),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_3,  -- ufix6
              any => Equal_out1_3
              );

  Ufind_ti_instance5 : find_ti
    GENERIC MAP( iter => 4
                 )
    PORT MAP( ts => ts(4),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_4,  -- ufix6
              any => Equal_out1_4
              );

  Ufind_ti_instance6 : find_ti
    GENERIC MAP( iter => 5
                 )
    PORT MAP( ts => ts(5),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_5,  -- ufix6
              any => Equal_out1_5
              );

  Ufind_ti_instance7 : find_ti
    GENERIC MAP( iter => 6
                 )
    PORT MAP( ts => ts(6),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_6,  -- ufix6
              any => Equal_out1_6
              );

  Ufind_ti_instance8 : find_ti
    GENERIC MAP( iter => 7
                 )
    PORT MAP( ts => ts(7),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_7,  -- ufix6
              any => Equal_out1_7
              );

  Ufind_ti_instance9 : find_ti
    GENERIC MAP( iter => 8
                 )
    PORT MAP( ts => ts(8),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_8,  -- ufix6
              any => Equal_out1_8
              );

  Ufind_ti_instance10 : find_ti
    GENERIC MAP( iter => 9
                 )
    PORT MAP( ts => ts(9),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_9,  -- ufix6
              any => Equal_out1_9
              );

  Ufind_ti_instance11 : find_ti
    GENERIC MAP( iter => 10
                 )
    PORT MAP( ts => ts(10),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_10,  -- ufix6
              any => Equal_out1_10
              );

  Ufind_ti_instance12 : find_ti
    GENERIC MAP( iter => 11
                 )
    PORT MAP( ts => ts(11),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_11,  -- ufix6
              any => Equal_out1_11
              );

  Ufind_ti_instance13 : find_ti
    GENERIC MAP( iter => 12
                 )
    PORT MAP( ts => ts(12),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_12,  -- ufix6
              any => Equal_out1_12
              );

  Ufind_ti_instance14 : find_ti
    GENERIC MAP( iter => 13
                 )
    PORT MAP( ts => ts(13),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_13,  -- ufix6
              any => Equal_out1_13
              );

  Ufind_ti_instance15 : find_ti
    GENERIC MAP( iter => 14
                 )
    PORT MAP( ts => ts(14),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_14,  -- ufix6
              any => Equal_out1_14
              );

  Ufind_ti_instance16 : find_ti
    GENERIC MAP( iter => 15
                 )
    PORT MAP( ts => ts(15),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_15,  -- ufix6
              any => Equal_out1_15
              );

  Ufind_ti_instance17 : find_ti
    GENERIC MAP( iter => 16
                 )
    PORT MAP( ts => ts(16),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_16,  -- ufix6
              any => Equal_out1_16
              );

  Ufind_ti_instance18 : find_ti
    GENERIC MAP( iter => 17
                 )
    PORT MAP( ts => ts(17),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_17,  -- ufix6
              any => Equal_out1_17
              );

  Ufind_ti_instance19 : find_ti
    GENERIC MAP( iter => 18
                 )
    PORT MAP( ts => ts(18),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_18,  -- ufix6
              any => Equal_out1_18
              );

  Ufind_ti_instance20 : find_ti
    GENERIC MAP( iter => 19
                 )
    PORT MAP( ts => ts(19),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_19,  -- ufix6
              any => Equal_out1_19
              );

  Ufind_ti_instance21 : find_ti
    GENERIC MAP( iter => 20
                 )
    PORT MAP( ts => ts(20),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_20,  -- ufix6
              any => Equal_out1_20
              );

  Ufind_ti_instance22 : find_ti
    GENERIC MAP( iter => 21
                 )
    PORT MAP( ts => ts(21),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_21,  -- ufix6
              any => Equal_out1_21
              );

  Ufind_ti_instance23 : find_ti
    GENERIC MAP( iter => 22
                 )
    PORT MAP( ts => ts(22),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_22,  -- ufix6
              any => Equal_out1_22
              );

  Ufind_ti_instance24 : find_ti
    GENERIC MAP( iter => 23
                 )
    PORT MAP( ts => ts(23),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_23,  -- ufix6
              any => Equal_out1_23
              );

  Ufind_ti_instance25 : find_ti
    GENERIC MAP( iter => 24
                 )
    PORT MAP( ts => ts(24),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_24,  -- ufix6
              any => Equal_out1_24
              );

  Ufind_ti_instance26 : find_ti
    GENERIC MAP( iter => 25
                 )
    PORT MAP( ts => ts(25),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_25,  -- ufix6
              any => Equal_out1_25
              );

  Ufind_ti_instance27 : find_ti
    GENERIC MAP( iter => 26
                 )
    PORT MAP( ts => ts(26),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_26,  -- ufix6
              any => Equal_out1_26
              );

  Ufind_ti_instance28 : find_ti
    GENERIC MAP( iter => 27
                 )
    PORT MAP( ts => ts(27),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_27,  -- ufix6
              any => Equal_out1_27
              );

  Ufind_ti_instance29 : find_ti
    GENERIC MAP( iter => 28
                 )
    PORT MAP( ts => ts(28),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_28,  -- ufix6
              any => Equal_out1_28
              );

  Ufind_ti_instance30 : find_ti
    GENERIC MAP( iter => 29
                 )
    PORT MAP( ts => ts(29),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_29,  -- ufix6
              any => Equal_out1_29
              );

  Ufind_ti_instance31 : find_ti
    GENERIC MAP( iter => 30
                 )
    PORT MAP( ts => ts(30),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_30,  -- ufix6
              any => Equal_out1_30
              );

  Ufind_ti_instance32 : find_ti
    GENERIC MAP( iter => 31
                 )
    PORT MAP( ts => ts(31),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_31,  -- ufix6
              any => Equal_out1_31
              );

  Ufind_ti_instance33 : find_ti
    GENERIC MAP( iter => 32
                 )
    PORT MAP( ts => ts(32),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_32,  -- ufix6
              any => Equal_out1_32
              );

  Ufind_ti_instance34 : find_ti
    GENERIC MAP( iter => 33
                 )
    PORT MAP( ts => ts(33),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_33,  -- ufix6
              any => Equal_out1_33
              );

  Ufind_ti_instance35 : find_ti
    GENERIC MAP( iter => 34
                 )
    PORT MAP( ts => ts(34),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_34,  -- ufix6
              any => Equal_out1_34
              );

  Ufind_ti_instance36 : find_ti
    GENERIC MAP( iter => 35
                 )
    PORT MAP( ts => ts(35),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_35,  -- ufix6
              any => Equal_out1_35
              );

  Ufind_ti_instance37 : find_ti
    GENERIC MAP( iter => 36
                 )
    PORT MAP( ts => ts(36),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_36,  -- ufix6
              any => Equal_out1_36
              );

  Ufind_ti_instance38 : find_ti
    GENERIC MAP( iter => 37
                 )
    PORT MAP( ts => ts(37),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_37,  -- ufix6
              any => Equal_out1_37
              );

  Ufind_ti_instance39 : find_ti
    GENERIC MAP( iter => 38
                 )
    PORT MAP( ts => ts(38),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_38,  -- ufix6
              any => Equal_out1_38
              );

  Ufind_ti_instance40 : find_ti
    GENERIC MAP( iter => 39
                 )
    PORT MAP( ts => ts(39),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_39,  -- ufix6
              any => Equal_out1_39
              );

  Ufind_ti_instance41 : find_ti
    GENERIC MAP( iter => 40
                 )
    PORT MAP( ts => ts(40),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_40,  -- ufix6
              any => Equal_out1_40
              );

  Ufind_ti_instance42 : find_ti
    GENERIC MAP( iter => 41
                 )
    PORT MAP( ts => ts(41),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_41,  -- ufix6
              any => Equal_out1_41
              );

  Ufind_ti_instance43 : find_ti
    GENERIC MAP( iter => 42
                 )
    PORT MAP( ts => ts(42),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_42,  -- ufix6
              any => Equal_out1_42
              );

  Ufind_ti_instance44 : find_ti
    GENERIC MAP( iter => 43
                 )
    PORT MAP( ts => ts(43),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_43,  -- ufix6
              any => Equal_out1_43
              );

  Ufind_ti_instance45 : find_ti
    GENERIC MAP( iter => 44
                 )
    PORT MAP( ts => ts(44),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_44,  -- ufix6
              any => Equal_out1_44
              );

  Ufind_ti_instance46 : find_ti
    GENERIC MAP( iter => 45
                 )
    PORT MAP( ts => ts(45),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_45,  -- ufix6
              any => Equal_out1_45
              );

  Ufind_ti_instance47 : find_ti
    GENERIC MAP( iter => 46
                 )
    PORT MAP( ts => ts(46),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_46,  -- ufix6
              any => Equal_out1_46
              );

  Ufind_ti_instance48 : find_ti
    GENERIC MAP( iter => 47
                 )
    PORT MAP( ts => ts(47),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_47,  -- ufix6
              any => Equal_out1_47
              );

  Ufind_ti_instance49 : find_ti
    GENERIC MAP( iter => 48
                 )
    PORT MAP( ts => ts(48),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_48,  -- ufix6
              any => Equal_out1_48
              );

  Ufind_ti_instance50 : find_ti
    GENERIC MAP( iter => 49
                 )
    PORT MAP( ts => ts(49),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_49,  -- ufix6
              any => Equal_out1_49
              );

  Ufind_ti_instance51 : find_ti
    GENERIC MAP( iter => 50
                 )
    PORT MAP( ts => ts(50),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_50,  -- ufix6
              any => Equal_out1_50
              );

  Ufind_ti_instance52 : find_ti
    GENERIC MAP( iter => 51
                 )
    PORT MAP( ts => ts(51),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_51,  -- ufix6
              any => Equal_out1_51
              );

  Ufind_ti_instance53 : find_ti
    GENERIC MAP( iter => 52
                 )
    PORT MAP( ts => ts(52),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_52,  -- ufix6
              any => Equal_out1_52
              );

  Ufind_ti_instance54 : find_ti
    GENERIC MAP( iter => 53
                 )
    PORT MAP( ts => ts(53),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_53,  -- ufix6
              any => Equal_out1_53
              );

  Ufind_ti_instance55 : find_ti
    GENERIC MAP( iter => 54
                 )
    PORT MAP( ts => ts(54),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_54,  -- ufix6
              any => Equal_out1_54
              );

  Ufind_ti_instance56 : find_ti
    GENERIC MAP( iter => 55
                 )
    PORT MAP( ts => ts(55),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_55,  -- ufix6
              any => Equal_out1_55
              );

  Ufind_ti_instance57 : find_ti
    GENERIC MAP( iter => 56
                 )
    PORT MAP( ts => ts(56),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_56,  -- ufix6
              any => Equal_out1_56
              );

  Ufind_ti_instance58 : find_ti
    GENERIC MAP( iter => 57
                 )
    PORT MAP( ts => ts(57),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_57,  -- ufix6
              any => Equal_out1_57
              );

  Ufind_ti_instance59 : find_ti
    GENERIC MAP( iter => 58
                 )
    PORT MAP( ts => ts(58),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_58,  -- ufix6
              any => Equal_out1_58
              );

  Ufind_ti_instance60 : find_ti
    GENERIC MAP( iter => 59
                 )
    PORT MAP( ts => ts(59),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_59,  -- ufix6
              any => Equal_out1_59
              );

  Ufind_ti_instance61 : find_ti
    GENERIC MAP( iter => 60
                 )
    PORT MAP( ts => ts(60),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_60,  -- ufix6
              any => Equal_out1_60
              );

  Ufind_ti_instance62 : find_ti
    GENERIC MAP( iter => 61
                 )
    PORT MAP( ts => ts(61),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_61,  -- ufix6
              any => Equal_out1_61
              );

  Ufind_ti_instance63 : find_ti
    GENERIC MAP( iter => 62
                 )
    PORT MAP( ts => ts(62),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_62,  -- ufix6
              any => Equal_out1_62
              );

  Ufind_ti_instance64 : find_ti
    GENERIC MAP( iter => 63
                 )
    PORT MAP( ts => ts(63),  -- uint32
              ti => ti,  -- uint32
              address => Switch_out1_63,  -- ufix6
              any => Equal_out1_63
              );

  Switch_out1_0_unsigned <= unsigned(Switch_out1_0);

  Switch_out1_2_unsigned <= unsigned(Switch_out1_2);

  Switch_out1_4_unsigned <= unsigned(Switch_out1_4);

  Switch_out1_6_unsigned <= unsigned(Switch_out1_6);

  Switch_out1_8_unsigned <= unsigned(Switch_out1_8);

  Switch_out1_10_unsigned <= unsigned(Switch_out1_10);

  Switch_out1_12_unsigned <= unsigned(Switch_out1_12);

  Switch_out1_14_unsigned <= unsigned(Switch_out1_14);

  Switch_out1_16_unsigned <= unsigned(Switch_out1_16);

  Switch_out1_18_unsigned <= unsigned(Switch_out1_18);

  Switch_out1_20_unsigned <= unsigned(Switch_out1_20);

  Switch_out1_22_unsigned <= unsigned(Switch_out1_22);

  Switch_out1_24_unsigned <= unsigned(Switch_out1_24);

  Switch_out1_26_unsigned <= unsigned(Switch_out1_26);

  Switch_out1_28_unsigned <= unsigned(Switch_out1_28);

  Switch_out1_30_unsigned <= unsigned(Switch_out1_30);

  Switch_out1_32_unsigned <= unsigned(Switch_out1_32);

  Switch_out1_34_unsigned <= unsigned(Switch_out1_34);

  Switch_out1_36_unsigned <= unsigned(Switch_out1_36);

  Switch_out1_38_unsigned <= unsigned(Switch_out1_38);

  Switch_out1_40_unsigned <= unsigned(Switch_out1_40);

  Switch_out1_42_unsigned <= unsigned(Switch_out1_42);

  Switch_out1_44_unsigned <= unsigned(Switch_out1_44);

  Switch_out1_46_unsigned <= unsigned(Switch_out1_46);

  Switch_out1_48_unsigned <= unsigned(Switch_out1_48);

  Switch_out1_50_unsigned <= unsigned(Switch_out1_50);

  Switch_out1_52_unsigned <= unsigned(Switch_out1_52);

  Switch_out1_54_unsigned <= unsigned(Switch_out1_54);

  Switch_out1_56_unsigned <= unsigned(Switch_out1_56);

  Switch_out1_58_unsigned <= unsigned(Switch_out1_58);

  Switch_out1_60_unsigned <= unsigned(Switch_out1_60);

  Switch_out1_62_unsigned <= unsigned(Switch_out1_62);

  Switch_out1_1_unsigned <= unsigned(Switch_out1_1);

  ---- Tree max implementation ----
  
  Max_stage1_1_val <= Switch_out1_0_unsigned WHEN Switch_out1_0_unsigned >= Switch_out1_1_unsigned ELSE
      Switch_out1_1_unsigned;

  Switch_out1_3_unsigned <= unsigned(Switch_out1_3);

  
  Max_stage1_2_val <= Switch_out1_2_unsigned WHEN Switch_out1_2_unsigned >= Switch_out1_3_unsigned ELSE
      Switch_out1_3_unsigned;

  
  Max_stage2_1_val <= Max_stage1_1_val WHEN Max_stage1_1_val >= Max_stage1_2_val ELSE
      Max_stage1_2_val;

  Switch_out1_5_unsigned <= unsigned(Switch_out1_5);

  
  Max_stage1_3_val <= Switch_out1_4_unsigned WHEN Switch_out1_4_unsigned >= Switch_out1_5_unsigned ELSE
      Switch_out1_5_unsigned;

  Switch_out1_7_unsigned <= unsigned(Switch_out1_7);

  
  Max_stage1_4_val <= Switch_out1_6_unsigned WHEN Switch_out1_6_unsigned >= Switch_out1_7_unsigned ELSE
      Switch_out1_7_unsigned;

  
  Max_stage2_2_val <= Max_stage1_3_val WHEN Max_stage1_3_val >= Max_stage1_4_val ELSE
      Max_stage1_4_val;

  
  Max_stage3_1_val <= Max_stage2_1_val WHEN Max_stage2_1_val >= Max_stage2_2_val ELSE
      Max_stage2_2_val;

  Switch_out1_9_unsigned <= unsigned(Switch_out1_9);

  
  Max_stage1_5_val <= Switch_out1_8_unsigned WHEN Switch_out1_8_unsigned >= Switch_out1_9_unsigned ELSE
      Switch_out1_9_unsigned;

  Switch_out1_11_unsigned <= unsigned(Switch_out1_11);

  
  Max_stage1_6_val <= Switch_out1_10_unsigned WHEN Switch_out1_10_unsigned >= Switch_out1_11_unsigned ELSE
      Switch_out1_11_unsigned;

  
  Max_stage2_3_val <= Max_stage1_5_val WHEN Max_stage1_5_val >= Max_stage1_6_val ELSE
      Max_stage1_6_val;

  Switch_out1_13_unsigned <= unsigned(Switch_out1_13);

  
  Max_stage1_7_val <= Switch_out1_12_unsigned WHEN Switch_out1_12_unsigned >= Switch_out1_13_unsigned ELSE
      Switch_out1_13_unsigned;

  Switch_out1_15_unsigned <= unsigned(Switch_out1_15);

  
  Max_stage1_8_val <= Switch_out1_14_unsigned WHEN Switch_out1_14_unsigned >= Switch_out1_15_unsigned ELSE
      Switch_out1_15_unsigned;

  
  Max_stage2_4_val <= Max_stage1_7_val WHEN Max_stage1_7_val >= Max_stage1_8_val ELSE
      Max_stage1_8_val;

  
  Max_stage3_2_val <= Max_stage2_3_val WHEN Max_stage2_3_val >= Max_stage2_4_val ELSE
      Max_stage2_4_val;

  
  Max_stage4_1_val <= Max_stage3_1_val WHEN Max_stage3_1_val >= Max_stage3_2_val ELSE
      Max_stage3_2_val;

  Switch_out1_17_unsigned <= unsigned(Switch_out1_17);

  
  Max_stage1_9_val <= Switch_out1_16_unsigned WHEN Switch_out1_16_unsigned >= Switch_out1_17_unsigned ELSE
      Switch_out1_17_unsigned;

  Switch_out1_19_unsigned <= unsigned(Switch_out1_19);

  
  Max_stage1_10_val <= Switch_out1_18_unsigned WHEN Switch_out1_18_unsigned >= Switch_out1_19_unsigned ELSE
      Switch_out1_19_unsigned;

  
  Max_stage2_5_val <= Max_stage1_9_val WHEN Max_stage1_9_val >= Max_stage1_10_val ELSE
      Max_stage1_10_val;

  Switch_out1_21_unsigned <= unsigned(Switch_out1_21);

  
  Max_stage1_11_val <= Switch_out1_20_unsigned WHEN Switch_out1_20_unsigned >= Switch_out1_21_unsigned ELSE
      Switch_out1_21_unsigned;

  Switch_out1_23_unsigned <= unsigned(Switch_out1_23);

  
  Max_stage1_12_val <= Switch_out1_22_unsigned WHEN Switch_out1_22_unsigned >= Switch_out1_23_unsigned ELSE
      Switch_out1_23_unsigned;

  
  Max_stage2_6_val <= Max_stage1_11_val WHEN Max_stage1_11_val >= Max_stage1_12_val ELSE
      Max_stage1_12_val;

  
  Max_stage3_3_val <= Max_stage2_5_val WHEN Max_stage2_5_val >= Max_stage2_6_val ELSE
      Max_stage2_6_val;

  Switch_out1_25_unsigned <= unsigned(Switch_out1_25);

  
  Max_stage1_13_val <= Switch_out1_24_unsigned WHEN Switch_out1_24_unsigned >= Switch_out1_25_unsigned ELSE
      Switch_out1_25_unsigned;

  Switch_out1_27_unsigned <= unsigned(Switch_out1_27);

  
  Max_stage1_14_val <= Switch_out1_26_unsigned WHEN Switch_out1_26_unsigned >= Switch_out1_27_unsigned ELSE
      Switch_out1_27_unsigned;

  
  Max_stage2_7_val <= Max_stage1_13_val WHEN Max_stage1_13_val >= Max_stage1_14_val ELSE
      Max_stage1_14_val;

  Switch_out1_29_unsigned <= unsigned(Switch_out1_29);

  
  Max_stage1_15_val <= Switch_out1_28_unsigned WHEN Switch_out1_28_unsigned >= Switch_out1_29_unsigned ELSE
      Switch_out1_29_unsigned;

  Switch_out1_31_unsigned <= unsigned(Switch_out1_31);

  
  Max_stage1_16_val <= Switch_out1_30_unsigned WHEN Switch_out1_30_unsigned >= Switch_out1_31_unsigned ELSE
      Switch_out1_31_unsigned;

  
  Max_stage2_8_val <= Max_stage1_15_val WHEN Max_stage1_15_val >= Max_stage1_16_val ELSE
      Max_stage1_16_val;

  
  Max_stage3_4_val <= Max_stage2_7_val WHEN Max_stage2_7_val >= Max_stage2_8_val ELSE
      Max_stage2_8_val;

  
  Max_stage4_2_val <= Max_stage3_3_val WHEN Max_stage3_3_val >= Max_stage3_4_val ELSE
      Max_stage3_4_val;

  
  Max_stage5_1_val <= Max_stage4_1_val WHEN Max_stage4_1_val >= Max_stage4_2_val ELSE
      Max_stage4_2_val;

  Switch_out1_33_unsigned <= unsigned(Switch_out1_33);

  
  Max_stage1_17_val <= Switch_out1_32_unsigned WHEN Switch_out1_32_unsigned >= Switch_out1_33_unsigned ELSE
      Switch_out1_33_unsigned;

  Switch_out1_35_unsigned <= unsigned(Switch_out1_35);

  
  Max_stage1_18_val <= Switch_out1_34_unsigned WHEN Switch_out1_34_unsigned >= Switch_out1_35_unsigned ELSE
      Switch_out1_35_unsigned;

  
  Max_stage2_9_val <= Max_stage1_17_val WHEN Max_stage1_17_val >= Max_stage1_18_val ELSE
      Max_stage1_18_val;

  Switch_out1_37_unsigned <= unsigned(Switch_out1_37);

  
  Max_stage1_19_val <= Switch_out1_36_unsigned WHEN Switch_out1_36_unsigned >= Switch_out1_37_unsigned ELSE
      Switch_out1_37_unsigned;

  Switch_out1_39_unsigned <= unsigned(Switch_out1_39);

  
  Max_stage1_20_val <= Switch_out1_38_unsigned WHEN Switch_out1_38_unsigned >= Switch_out1_39_unsigned ELSE
      Switch_out1_39_unsigned;

  
  Max_stage2_10_val <= Max_stage1_19_val WHEN Max_stage1_19_val >= Max_stage1_20_val ELSE
      Max_stage1_20_val;

  
  Max_stage3_5_val <= Max_stage2_9_val WHEN Max_stage2_9_val >= Max_stage2_10_val ELSE
      Max_stage2_10_val;

  Switch_out1_41_unsigned <= unsigned(Switch_out1_41);

  
  Max_stage1_21_val <= Switch_out1_40_unsigned WHEN Switch_out1_40_unsigned >= Switch_out1_41_unsigned ELSE
      Switch_out1_41_unsigned;

  Switch_out1_43_unsigned <= unsigned(Switch_out1_43);

  
  Max_stage1_22_val <= Switch_out1_42_unsigned WHEN Switch_out1_42_unsigned >= Switch_out1_43_unsigned ELSE
      Switch_out1_43_unsigned;

  
  Max_stage2_11_val <= Max_stage1_21_val WHEN Max_stage1_21_val >= Max_stage1_22_val ELSE
      Max_stage1_22_val;

  Switch_out1_45_unsigned <= unsigned(Switch_out1_45);

  
  Max_stage1_23_val <= Switch_out1_44_unsigned WHEN Switch_out1_44_unsigned >= Switch_out1_45_unsigned ELSE
      Switch_out1_45_unsigned;

  Switch_out1_47_unsigned <= unsigned(Switch_out1_47);

  
  Max_stage1_24_val <= Switch_out1_46_unsigned WHEN Switch_out1_46_unsigned >= Switch_out1_47_unsigned ELSE
      Switch_out1_47_unsigned;

  
  Max_stage2_12_val <= Max_stage1_23_val WHEN Max_stage1_23_val >= Max_stage1_24_val ELSE
      Max_stage1_24_val;

  
  Max_stage3_6_val <= Max_stage2_11_val WHEN Max_stage2_11_val >= Max_stage2_12_val ELSE
      Max_stage2_12_val;

  
  Max_stage4_3_val <= Max_stage3_5_val WHEN Max_stage3_5_val >= Max_stage3_6_val ELSE
      Max_stage3_6_val;

  Switch_out1_49_unsigned <= unsigned(Switch_out1_49);

  
  Max_stage1_25_val <= Switch_out1_48_unsigned WHEN Switch_out1_48_unsigned >= Switch_out1_49_unsigned ELSE
      Switch_out1_49_unsigned;

  Switch_out1_51_unsigned <= unsigned(Switch_out1_51);

  
  Max_stage1_26_val <= Switch_out1_50_unsigned WHEN Switch_out1_50_unsigned >= Switch_out1_51_unsigned ELSE
      Switch_out1_51_unsigned;

  
  Max_stage2_13_val <= Max_stage1_25_val WHEN Max_stage1_25_val >= Max_stage1_26_val ELSE
      Max_stage1_26_val;

  Switch_out1_53_unsigned <= unsigned(Switch_out1_53);

  
  Max_stage1_27_val <= Switch_out1_52_unsigned WHEN Switch_out1_52_unsigned >= Switch_out1_53_unsigned ELSE
      Switch_out1_53_unsigned;

  Switch_out1_55_unsigned <= unsigned(Switch_out1_55);

  
  Max_stage1_28_val <= Switch_out1_54_unsigned WHEN Switch_out1_54_unsigned >= Switch_out1_55_unsigned ELSE
      Switch_out1_55_unsigned;

  
  Max_stage2_14_val <= Max_stage1_27_val WHEN Max_stage1_27_val >= Max_stage1_28_val ELSE
      Max_stage1_28_val;

  
  Max_stage3_7_val <= Max_stage2_13_val WHEN Max_stage2_13_val >= Max_stage2_14_val ELSE
      Max_stage2_14_val;

  Switch_out1_57_unsigned <= unsigned(Switch_out1_57);

  
  Max_stage1_29_val <= Switch_out1_56_unsigned WHEN Switch_out1_56_unsigned >= Switch_out1_57_unsigned ELSE
      Switch_out1_57_unsigned;

  Switch_out1_59_unsigned <= unsigned(Switch_out1_59);

  
  Max_stage1_30_val <= Switch_out1_58_unsigned WHEN Switch_out1_58_unsigned >= Switch_out1_59_unsigned ELSE
      Switch_out1_59_unsigned;

  
  Max_stage2_15_val <= Max_stage1_29_val WHEN Max_stage1_29_val >= Max_stage1_30_val ELSE
      Max_stage1_30_val;

  Switch_out1_61_unsigned <= unsigned(Switch_out1_61);

  
  Max_stage1_31_val <= Switch_out1_60_unsigned WHEN Switch_out1_60_unsigned >= Switch_out1_61_unsigned ELSE
      Switch_out1_61_unsigned;

  Switch_out1_63_unsigned <= unsigned(Switch_out1_63);

  
  Max_stage1_32_val <= Switch_out1_62_unsigned WHEN Switch_out1_62_unsigned >= Switch_out1_63_unsigned ELSE
      Switch_out1_63_unsigned;

  
  Max_stage2_16_val <= Max_stage1_31_val WHEN Max_stage1_31_val >= Max_stage1_32_val ELSE
      Max_stage1_32_val;

  
  Max_stage3_8_val <= Max_stage2_15_val WHEN Max_stage2_15_val >= Max_stage2_16_val ELSE
      Max_stage2_16_val;

  
  Max_stage4_4_val <= Max_stage3_7_val WHEN Max_stage3_7_val >= Max_stage3_8_val ELSE
      Max_stage3_8_val;

  
  Max_stage5_2_val <= Max_stage4_3_val WHEN Max_stage4_3_val >= Max_stage4_4_val ELSE
      Max_stage4_4_val;

  
  Max_stage6_val <= Max_stage5_1_val WHEN Max_stage5_1_val >= Max_stage5_2_val ELSE
      Max_stage5_2_val;

  address <= std_logic_vector(Max_stage6_val);

  OR_rsvd_output : PROCESS (Equal_out1_0, Equal_out1_1, Equal_out1_10, Equal_out1_11, Equal_out1_12,
       Equal_out1_13, Equal_out1_14, Equal_out1_15, Equal_out1_16,
       Equal_out1_17, Equal_out1_18, Equal_out1_19, Equal_out1_2, Equal_out1_20,
       Equal_out1_21, Equal_out1_22, Equal_out1_23, Equal_out1_24,
       Equal_out1_25, Equal_out1_26, Equal_out1_27, Equal_out1_28,
       Equal_out1_29, Equal_out1_3, Equal_out1_30, Equal_out1_31, Equal_out1_32,
       Equal_out1_33, Equal_out1_34, Equal_out1_35, Equal_out1_36,
       Equal_out1_37, Equal_out1_38, Equal_out1_39, Equal_out1_4, Equal_out1_40,
       Equal_out1_41, Equal_out1_42, Equal_out1_43, Equal_out1_44,
       Equal_out1_45, Equal_out1_46, Equal_out1_47, Equal_out1_48,
       Equal_out1_49, Equal_out1_5, Equal_out1_50, Equal_out1_51, Equal_out1_52,
       Equal_out1_53, Equal_out1_54, Equal_out1_55, Equal_out1_56,
       Equal_out1_57, Equal_out1_58, Equal_out1_59, Equal_out1_6, Equal_out1_60,
       Equal_out1_61, Equal_out1_62, Equal_out1_63, Equal_out1_7, Equal_out1_8,
       Equal_out1_9)
    VARIABLE tt : std_logic;
  BEGIN
    tt := Equal_out1_21 OR (Equal_out1_20 OR (Equal_out1_19 OR (Equal_out1_18 OR (Equal_out1_17 OR 
      (Equal_out1_16 OR (Equal_out1_15 OR (Equal_out1_14 OR (Equal_out1_13 OR (Equal_out1_12 OR 
      (Equal_out1_11 OR (Equal_out1_10 OR (Equal_out1_9 OR (Equal_out1_8 OR (Equal_out1_7 OR (Equal_out1_6 OR 
      (Equal_out1_5 OR (Equal_out1_4 OR (Equal_out1_3 OR (Equal_out1_2 OR (Equal_out1_0 OR 
      Equal_out1_1))))))))))))))))))));
    tt := Equal_out1_22 OR tt;
    tt := Equal_out1_23 OR tt;
    tt := Equal_out1_24 OR tt;
    tt := Equal_out1_25 OR tt;
    tt := Equal_out1_26 OR tt;
    tt := Equal_out1_27 OR tt;
    tt := Equal_out1_28 OR tt;
    tt := Equal_out1_29 OR tt;
    tt := Equal_out1_30 OR tt;
    tt := Equal_out1_31 OR tt;
    tt := Equal_out1_32 OR tt;
    tt := Equal_out1_33 OR tt;
    tt := Equal_out1_34 OR tt;
    tt := Equal_out1_35 OR tt;
    tt := Equal_out1_36 OR tt;
    tt := Equal_out1_37 OR tt;
    tt := Equal_out1_38 OR tt;
    tt := Equal_out1_39 OR tt;
    tt := Equal_out1_40 OR tt;
    tt := Equal_out1_41 OR tt;
    tt := Equal_out1_42 OR tt;
    tt := Equal_out1_43 OR tt;
    tt := Equal_out1_44 OR tt;
    tt := Equal_out1_45 OR tt;
    tt := Equal_out1_46 OR tt;
    tt := Equal_out1_47 OR tt;
    tt := Equal_out1_48 OR tt;
    tt := Equal_out1_49 OR tt;
    tt := Equal_out1_50 OR tt;
    tt := Equal_out1_51 OR tt;
    tt := Equal_out1_52 OR tt;
    tt := Equal_out1_53 OR tt;
    tt := Equal_out1_54 OR tt;
    tt := Equal_out1_55 OR tt;
    tt := Equal_out1_56 OR tt;
    tt := Equal_out1_57 OR tt;
    tt := Equal_out1_58 OR tt;
    tt := Equal_out1_59 OR tt;
    tt := Equal_out1_60 OR tt;
    tt := Equal_out1_61 OR tt;
    tt := Equal_out1_62 OR tt;
    tt := Equal_out1_63 OR tt;
    OR_out1 <= tt;
  END PROCESS OR_rsvd_output;


  valid <= OR_out1;

END rtl;


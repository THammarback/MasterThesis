-- -------------------------------------------------------------
-- 
-- File Name: E:\Downloads\2021b-10mayFINAL\2021b-10mayFINAL\srcFiles\DIG_IF\hdlsrc\DIG_IF_test\DIG_IF.vhd
-- Created: 2022-05-10 17:23:04
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DIG_IF
-- Source Path: DIG_IF_test/DIG_IF
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DIG_IF_pac.ALL;

ENTITY DIG_IF IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        antenna_dl_re                     :   IN    vector_of_std_logic_vector4(0 TO 7);  -- ufix4 [8]
        antenna_dl_im                     :   IN    vector_of_std_logic_vector4(0 TO 7);  -- ufix4 [8]
        set_ti_valid                      :   IN    std_logic;
        set_ti_ti                         :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        req_in_valid                      :   IN    std_logic;
        req_in_fn                         :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        req_in_id                         :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        req_in_filter_address             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        req_in_dist_address               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        req_in_ts                         :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        req_in_ls                         :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        req_in_UC                         :   IN    std_logic;
        req_in_UT                         :   IN    std_logic;
        req_in_SEND                       :   IN    std_logic;
        req_cancel_valid                  :   IN    std_logic;
        req_cancel_id                     :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        transmit_data_re                  :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        transmit_data_im                  :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        coeff_input_address               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        coeff_input_data_row              :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        coeff_input_ul_filter             :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        coeff_input_dl_filter             :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        coeff_input_combiner              :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
        coeff_input_splitter              :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        fetch_valid                       :   OUT   std_logic;
        fetch_id                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        fetch_fn                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        occupy                            :   OUT   std_logic;
        req_out_valid                     :   OUT   std_logic;
        req_out_SEND                      :   OUT   std_logic;
        req_out_UC                        :   OUT   std_logic;
        req_out_filter_address            :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        req_out_dist_address              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        req_out_id                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        req_out_fn                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        dl_stream_re                      :   OUT   vector_of_std_logic_vector28(0 TO 3);  -- ufix28 [4]
        dl_stream_im                      :   OUT   vector_of_std_logic_vector28(0 TO 3);  -- ufix28 [4]
        UC_stream_re                      :   OUT   vector_of_std_logic_vector20(0 TO 7);  -- ufix20 [8]
        UC_stream_im                      :   OUT   vector_of_std_logic_vector20(0 TO 7);  -- ufix20 [8]
        errors_id_not_found_valid         :   OUT   std_logic;
        errors_id_not_found_id            :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        errors_mem_full                   :   OUT   std_logic;
        errors_overlap                    :   OUT   std_logic;
        antenna_ul_re                     :   OUT   vector_of_std_logic_vector32(0 TO 7);  -- uint32 [8]
        antenna_ul_im                     :   OUT   vector_of_std_logic_vector32(0 TO 7)  -- uint32 [8]
        );
END DIG_IF;


ARCHITECTURE rtl OF DIG_IF IS

  -- Component Declarations
  COMPONENT time_ctrl
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          in_bus_valid                    :   IN    std_logic;
          in_bus_ti                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          ti                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  COMPONENT frame_ctrl
    PORT( clk                             :   IN    std_logic;
          ti                              :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          req_in_req_UC                   :   IN    std_logic;
          req_in_req_SEND                 :   IN    std_logic;
          req_in_req_fn                   :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          req_in_req_filter_address       :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          req_in_req_dist_address         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          req_in_req_ss                   :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          req_in_id                       :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          req_in_valid                    :   IN    std_logic;
          req_out_valid                   :   OUT   std_logic;
          req_out_SEND                    :   OUT   std_logic;
          req_out_UC                      :   OUT   std_logic;
          req_out_filter_address          :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          req_out_dist_address            :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          req_out_id                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          req_out_fn                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          busy                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT request_buffer
    PORT( clk                             :   IN    std_logic;
          ti                              :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          req_in_valid                    :   IN    std_logic;
          req_in_fn                       :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          req_in_id                       :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          req_in_filter_address           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          req_in_dist_address             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          req_in_ts                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          req_in_ls                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          req_in_UC                       :   IN    std_logic;
          req_in_UT                       :   IN    std_logic;
          req_in_SEND                     :   IN    std_logic;
          req_cancel_valid                :   IN    std_logic;
          req_cancel_id                   :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          busy                            :   IN    std_logic;
          req_out_req_UC                  :   OUT   std_logic;
          req_out_req_SEND                :   OUT   std_logic;
          req_out_req_fn                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          req_out_req_filter_address      :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          req_out_req_dist_address        :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          req_out_req_ss                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          req_out_id                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          req_out_valid                   :   OUT   std_logic;
          errors_id_not_found_valid       :   OUT   std_logic;
          errors_id_not_found_id          :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          errors_mem_full                 :   OUT   std_logic;
          errors_overlap                  :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT transmit_fetching
    PORT( req_in_req_SEND                 :   IN    std_logic;
          req_in_req_fn                   :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          req_in_id                       :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          req_in_valid                    :   IN    std_logic;
          fetch_valid                     :   OUT   std_logic;
          fetch_id                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          fetch_fn                        :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
          );
  END COMPONENT;

  COMPONENT transmitter
    PORT( req_in_valid                    :   IN    std_logic;
          req_in_SEND                     :   IN    std_logic;
          req_in_filter_address           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          req_in_dist_address             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          transmit_data_re                :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          transmit_data_im                :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          bank_select_filter_address      :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          bank_select_dist_address        :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          data_re                         :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          data_im                         :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          occupy                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT combiner_bank
    PORT( clk                             :   IN    std_logic;
          wr_data                         :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          wr_addr                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          wr_en                           :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          rd_addr                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          coeff_out                       :   OUT   vector_of_std_logic_vector8(0 TO 63)  -- uint8 [64]
          );
  END COMPONENT;

  COMPONENT combiner_to_complex
    PORT( in_stream                       :   IN    vector_of_std_logic_vector8(0 TO 63);  -- uint8 [64]
          out_stream_re                   :   OUT   vector_of_std_logic_vector8(0 TO 31);  -- uint8 [32]
          out_stream_im                   :   OUT   vector_of_std_logic_vector8(0 TO 31)  -- uint8 [32]
          );
  END COMPONENT;

  COMPONENT dl_filter_bank
    PORT( clk                             :   IN    std_logic;
          wr_data                         :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          wr_addr                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          wr_en                           :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          rd_addr                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          coeff_out                       :   OUT   vector_of_std_logic_vector8(0 TO 9)  -- uint8 [10]
          );
  END COMPONENT;

  COMPONENT blocker
    PORT( receive_ctrl_bus_valid          :   IN    std_logic;
          data_in_re                      :   IN    vector_of_std_logic_vector4(0 TO 7);  -- ufix4 [8]
          data_in_im                      :   IN    vector_of_std_logic_vector4(0 TO 7);  -- ufix4 [8]
          data_out_re                     :   OUT   vector_of_std_logic_vector4(0 TO 7);  -- ufix4 [8]
          data_out_im                     :   OUT   vector_of_std_logic_vector4(0 TO 7)  -- ufix4 [8]
          );
  END COMPONENT;

  COMPONENT dl_filter
    PORT( clk                             :   IN    std_logic;
          coeffs                          :   IN    vector_of_std_logic_vector8(0 TO 9);  -- uint8 [10]
          stream_in_re                    :   IN    vector_of_std_logic_vector4(0 TO 7);  -- ufix4 [8]
          stream_in_im                    :   IN    vector_of_std_logic_vector4(0 TO 7);  -- ufix4 [8]
          stream_out_re                   :   OUT   vector_of_std_logic_vector20(0 TO 7);  -- ufix20 [8]
          stream_out_im                   :   OUT   vector_of_std_logic_vector20(0 TO 7)  -- ufix20 [8]
          );
  END COMPONENT;

  COMPONENT combining
    PORT( coeffs_re                       :   IN    vector_of_std_logic_vector8(0 TO 31);  -- uint8 [32]
          coeffs_im                       :   IN    vector_of_std_logic_vector8(0 TO 31);  -- uint8 [32]
          dl_ctrl_bus_UC                  :   IN    std_logic;
          data_re                         :   IN    vector_of_std_logic_vector20(0 TO 7);  -- ufix20 [8]
          data_im                         :   IN    vector_of_std_logic_vector20(0 TO 7);  -- ufix20 [8]
          dl_stream_re                    :   OUT   vector_of_std_logic_vector28(0 TO 3);  -- ufix28 [4]
          dl_stream_im                    :   OUT   vector_of_std_logic_vector28(0 TO 3);  -- ufix28 [4]
          UC_stream_re                    :   OUT   vector_of_std_logic_vector20(0 TO 7);  -- ufix20 [8]
          UC_stream_im                    :   OUT   vector_of_std_logic_vector20(0 TO 7)  -- ufix20 [8]
          );
  END COMPONENT;

  COMPONENT splitter_bank
    PORT( clk                             :   IN    std_logic;
          wr_data                         :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          wr_addr                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          wr_en                           :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          rd_addr                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          coeff_out                       :   OUT   vector_of_std_logic_vector8(0 TO 15)  -- uint8 [16]
          );
  END COMPONENT;

  COMPONENT splitter_to_complex
    PORT( in_stream                       :   IN    vector_of_std_logic_vector8(0 TO 15);  -- uint8 [16]
          out_stream_re                   :   OUT   vector_of_std_logic_vector8(0 TO 7);  -- uint8 [8]
          out_stream_im                   :   OUT   vector_of_std_logic_vector8(0 TO 7)  -- uint8 [8]
          );
  END COMPONENT;

  COMPONENT ul_filter_bank
    PORT( clk                             :   IN    std_logic;
          wr_data                         :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          wr_addr                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          wr_en                           :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          rd_addr                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          coeff_out                       :   OUT   vector_of_std_logic_vector8(0 TO 9)  -- uint8 [10]
          );
  END COMPONENT;

  COMPONENT ul_filter
    PORT( clk                             :   IN    std_logic;
          coeffs                          :   IN    vector_of_std_logic_vector8(0 TO 9);  -- uint8 [10]
          stream_in_re                    :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          stream_in_im                    :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          stream_out_re                   :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
          stream_out_im                   :   OUT   std_logic_vector(23 DOWNTO 0)  -- ufix24
          );
  END COMPONENT;

  COMPONENT splitter
    PORT( coeffs_re                       :   IN    vector_of_std_logic_vector8(0 TO 7);  -- uint8 [8]
          coeffs_im                       :   IN    vector_of_std_logic_vector8(0 TO 7);  -- uint8 [8]
          data_in_re                      :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
          data_in_im                      :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
          data_out_re                     :   OUT   vector_of_std_logic_vector32(0 TO 7);  -- uint32 [8]
          data_out_im                     :   OUT   vector_of_std_logic_vector32(0 TO 7)  -- uint32 [8]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : time_ctrl
    USE ENTITY work.time_ctrl(rtl);

  FOR ALL : frame_ctrl
    USE ENTITY work.frame_ctrl(rtl);

  FOR ALL : request_buffer
    USE ENTITY work.request_buffer(rtl);

  FOR ALL : transmit_fetching
    USE ENTITY work.transmit_fetching(rtl);

  FOR ALL : transmitter
    USE ENTITY work.transmitter(rtl);

  FOR ALL : combiner_bank
    USE ENTITY work.combiner_bank(rtl);

  FOR ALL : combiner_to_complex
    USE ENTITY work.combiner_to_complex(rtl);

  FOR ALL : dl_filter_bank
    USE ENTITY work.dl_filter_bank(rtl);

  FOR ALL : blocker
    USE ENTITY work.blocker(rtl);

  FOR ALL : dl_filter
    USE ENTITY work.dl_filter(rtl);

  FOR ALL : combining
    USE ENTITY work.combining(rtl);

  FOR ALL : splitter_bank
    USE ENTITY work.splitter_bank(rtl);

  FOR ALL : splitter_to_complex
    USE ENTITY work.splitter_to_complex(rtl);

  FOR ALL : ul_filter_bank
    USE ENTITY work.ul_filter_bank(rtl);

  FOR ALL : ul_filter
    USE ENTITY work.ul_filter(rtl);

  FOR ALL : splitter
    USE ENTITY work.splitter(rtl);

  -- Signals
  SIGNAL time_ctrl_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL request_buffer_out1_req_UC       : std_logic;
  SIGNAL request_buffer_out1_req_SEND     : std_logic;
  SIGNAL request_buffer_out1_req_fn       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL request_buffer_out1_req_filter_addre : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL request_buffer_out1_req_dist_address : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL request_buffer_out1_req_ss       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL request_buffer_out1_id           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL request_buffer_out1_valid        : std_logic;
  SIGNAL frame_ctrl_out1_valid            : std_logic;
  SIGNAL frame_ctrl_out1_SEND             : std_logic;
  SIGNAL frame_ctrl_out1_UC               : std_logic;
  SIGNAL frame_ctrl_out1_filter_address   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL frame_ctrl_out1_dist_address     : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL frame_ctrl_out1_id               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL frame_ctrl_out1_fn               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL frame_ctrl_out2                  : std_logic;
  SIGNAL request_buffer_out2_id_not_found_val : std_logic;
  SIGNAL request_buffer_out2_id_not_found_id : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL request_buffer_out2_mem_full     : std_logic;
  SIGNAL request_buffer_out2_overlap      : std_logic;
  SIGNAL transmit_fetching_out1_valid     : std_logic;
  SIGNAL transmit_fetching_out1_id        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL transmit_fetching_out1_fn        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL transmitter_out1_filter_address  : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL transmitter_out1_dist_address    : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL transmitter_out2_re              : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL transmitter_out2_im              : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL transmitter_out3                 : std_logic;
  SIGNAL data_row                         : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL data_row_1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL address                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL address_1                        : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL combiner                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL combiner_1                       : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL filter_address                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL filter_address_1                 : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL combiner_bank_out1               : vector_of_std_logic_vector8(0 TO 63);  -- ufix8 [64]
  SIGNAL combiner_to_complex_out1_re      : vector_of_std_logic_vector8(0 TO 31);  -- ufix8 [32]
  SIGNAL combiner_to_complex_out1_im      : vector_of_std_logic_vector8(0 TO 31);  -- ufix8 [32]
  SIGNAL data_row_2                       : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL data_row_3                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL address_2                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL address_3                        : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL dl_filter_1                      : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL dl_filter_2                      : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL filter_address_2                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL filter_address_3                 : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL dl_filter_bank_out1              : vector_of_std_logic_vector8(0 TO 9);  -- ufix8 [10]
  SIGNAL blocker_out1_re                  : vector_of_std_logic_vector4(0 TO 7);  -- ufix4 [8]
  SIGNAL blocker_out1_im                  : vector_of_std_logic_vector4(0 TO 7);  -- ufix4 [8]
  SIGNAL dl_filter_out1_re                : vector_of_std_logic_vector20(0 TO 7);  -- ufix20 [8]
  SIGNAL dl_filter_out1_im                : vector_of_std_logic_vector20(0 TO 7);  -- ufix20 [8]
  SIGNAL combining_out1_re                : vector_of_std_logic_vector28(0 TO 3);  -- ufix28 [4]
  SIGNAL combining_out1_im                : vector_of_std_logic_vector28(0 TO 3);  -- ufix28 [4]
  SIGNAL combining_out2_re                : vector_of_std_logic_vector20(0 TO 7);  -- ufix20 [8]
  SIGNAL combining_out2_im                : vector_of_std_logic_vector20(0 TO 7);  -- ufix20 [8]
  SIGNAL data_row_4                       : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL data_row_5                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL address_4                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL address_5                        : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL splitter_1                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL splitter_2                       : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL dist_address                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL dist_address_1                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL splitter_bank_out1               : vector_of_std_logic_vector8(0 TO 15);  -- ufix8 [16]
  SIGNAL splitter_to_complex_out1_re      : vector_of_std_logic_vector8(0 TO 7);  -- ufix8 [8]
  SIGNAL splitter_to_complex_out1_im      : vector_of_std_logic_vector8(0 TO 7);  -- ufix8 [8]
  SIGNAL data_row_6                       : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL data_row_7                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL address_6                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL address_7                        : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL ul_filter_1                      : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL ul_filter_2                      : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL filter_address_4                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL filter_address_5                 : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL ul_filter_bank_out1              : vector_of_std_logic_vector8(0 TO 9);  -- ufix8 [10]
  SIGNAL ul_filter_out1_re                : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL ul_filter_out1_im                : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL splitter_out1_re                 : vector_of_std_logic_vector32(0 TO 7);  -- ufix32 [8]
  SIGNAL splitter_out1_im                 : vector_of_std_logic_vector32(0 TO 7);  -- ufix32 [8]

BEGIN
  -- Up-link
  -- 
  -- Down-link

  Utime_ctrl_1 : time_ctrl
    PORT MAP( clk => clk,
              reset_x => reset_x,
              in_bus_valid => set_ti_valid,
              in_bus_ti => set_ti_ti,  -- uint32
              ti => time_ctrl_out1  -- uint32
              );

  Uframe_ctrl_1 : frame_ctrl
    PORT MAP( clk => clk,
              ti => time_ctrl_out1,  -- uint32
              req_in_req_UC => request_buffer_out1_req_UC,
              req_in_req_SEND => request_buffer_out1_req_SEND,
              req_in_req_fn => request_buffer_out1_req_fn,  -- uint16
              req_in_req_filter_address => request_buffer_out1_req_filter_addre,  -- uint8
              req_in_req_dist_address => request_buffer_out1_req_dist_address,  -- uint8
              req_in_req_ss => request_buffer_out1_req_ss,  -- uint32
              req_in_id => request_buffer_out1_id,  -- uint16
              req_in_valid => request_buffer_out1_valid,
              req_out_valid => frame_ctrl_out1_valid,
              req_out_SEND => frame_ctrl_out1_SEND,
              req_out_UC => frame_ctrl_out1_UC,
              req_out_filter_address => frame_ctrl_out1_filter_address,  -- uint8
              req_out_dist_address => frame_ctrl_out1_dist_address,  -- uint8
              req_out_id => frame_ctrl_out1_id,  -- uint16
              req_out_fn => frame_ctrl_out1_fn,  -- uint16
              busy => frame_ctrl_out2
              );

  Urequest_buffer_1 : request_buffer
    PORT MAP( clk => clk,
              ti => time_ctrl_out1,  -- uint32
              req_in_valid => req_in_valid,
              req_in_fn => req_in_fn,  -- uint16
              req_in_id => req_in_id,  -- uint16
              req_in_filter_address => req_in_filter_address,  -- uint8
              req_in_dist_address => req_in_dist_address,  -- uint8
              req_in_ts => req_in_ts,  -- uint32
              req_in_ls => req_in_ls,  -- uint32
              req_in_UC => req_in_UC,
              req_in_UT => req_in_UT,
              req_in_SEND => req_in_SEND,
              req_cancel_valid => req_cancel_valid,
              req_cancel_id => req_cancel_id,  -- uint16
              busy => frame_ctrl_out2,
              req_out_req_UC => request_buffer_out1_req_UC,
              req_out_req_SEND => request_buffer_out1_req_SEND,
              req_out_req_fn => request_buffer_out1_req_fn,  -- uint16
              req_out_req_filter_address => request_buffer_out1_req_filter_addre,  -- uint8
              req_out_req_dist_address => request_buffer_out1_req_dist_address,  -- uint8
              req_out_req_ss => request_buffer_out1_req_ss,  -- uint32
              req_out_id => request_buffer_out1_id,  -- uint16
              req_out_valid => request_buffer_out1_valid,
              errors_id_not_found_valid => request_buffer_out2_id_not_found_val,
              errors_id_not_found_id => request_buffer_out2_id_not_found_id,  -- uint16
              errors_mem_full => request_buffer_out2_mem_full,
              errors_overlap => request_buffer_out2_overlap
              );

  Utransmit_fetching_1 : transmit_fetching
    PORT MAP( req_in_req_SEND => request_buffer_out1_req_SEND,
              req_in_req_fn => request_buffer_out1_req_fn,  -- uint16
              req_in_id => request_buffer_out1_id,  -- uint16
              req_in_valid => request_buffer_out1_valid,
              fetch_valid => transmit_fetching_out1_valid,
              fetch_id => transmit_fetching_out1_id,  -- uint16
              fetch_fn => transmit_fetching_out1_fn  -- uint16
              );

  Utransmitter_1 : transmitter
    PORT MAP( req_in_valid => frame_ctrl_out1_valid,
              req_in_SEND => frame_ctrl_out1_SEND,
              req_in_filter_address => frame_ctrl_out1_filter_address,  -- uint8
              req_in_dist_address => frame_ctrl_out1_dist_address,  -- uint8
              transmit_data_re => transmit_data_re,  -- ufix4
              transmit_data_im => transmit_data_im,  -- ufix4
              bank_select_filter_address => transmitter_out1_filter_address,  -- uint8
              bank_select_dist_address => transmitter_out1_dist_address,  -- uint8
              data_re => transmitter_out2_re,  -- uint8
              data_im => transmitter_out2_im,  -- uint8
              occupy => transmitter_out3
              );

  Ucombiner_bank_1 : combiner_bank
    PORT MAP( clk => clk,
              wr_data => data_row_1,  -- ufix64
              wr_addr => address_1,  -- uint8
              wr_en => combiner_1,  -- ufix9
              rd_addr => filter_address_1,  -- uint8
              coeff_out => combiner_bank_out1  -- uint8 [64]
              );

  Ucombiner_to_complex_1 : combiner_to_complex
    PORT MAP( in_stream => combiner_bank_out1,  -- uint8 [64]
              out_stream_re => combiner_to_complex_out1_re,  -- uint8 [32]
              out_stream_im => combiner_to_complex_out1_im  -- uint8 [32]
              );

  Udl_filter_bank_1 : dl_filter_bank
    PORT MAP( clk => clk,
              wr_data => data_row_3,  -- ufix64
              wr_addr => address_3,  -- uint8
              wr_en => dl_filter_2,  -- ufix3
              rd_addr => filter_address_3,  -- uint8
              coeff_out => dl_filter_bank_out1  -- uint8 [10]
              );

  Ublocker_1 : blocker
    PORT MAP( receive_ctrl_bus_valid => frame_ctrl_out1_valid,
              data_in_re => antenna_dl_re,  -- ufix4 [8]
              data_in_im => antenna_dl_im,  -- ufix4 [8]
              data_out_re => blocker_out1_re,  -- ufix4 [8]
              data_out_im => blocker_out1_im  -- ufix4 [8]
              );

  Udl_filter_3 : dl_filter
    PORT MAP( clk => clk,
              coeffs => dl_filter_bank_out1,  -- uint8 [10]
              stream_in_re => blocker_out1_re,  -- ufix4 [8]
              stream_in_im => blocker_out1_im,  -- ufix4 [8]
              stream_out_re => dl_filter_out1_re,  -- ufix20 [8]
              stream_out_im => dl_filter_out1_im  -- ufix20 [8]
              );

  Ucombining_1 : combining
    PORT MAP( coeffs_re => combiner_to_complex_out1_re,  -- uint8 [32]
              coeffs_im => combiner_to_complex_out1_im,  -- uint8 [32]
              dl_ctrl_bus_UC => frame_ctrl_out1_UC,
              data_re => dl_filter_out1_re,  -- ufix20 [8]
              data_im => dl_filter_out1_im,  -- ufix20 [8]
              dl_stream_re => combining_out1_re,  -- ufix28 [4]
              dl_stream_im => combining_out1_im,  -- ufix28 [4]
              UC_stream_re => combining_out2_re,  -- ufix20 [8]
              UC_stream_im => combining_out2_im  -- ufix20 [8]
              );

  Usplitter_bank_1 : splitter_bank
    PORT MAP( clk => clk,
              wr_data => data_row_5,  -- ufix64
              wr_addr => address_5,  -- uint8
              wr_en => splitter_2,  -- ufix3
              rd_addr => dist_address_1,  -- uint8
              coeff_out => splitter_bank_out1  -- uint8 [16]
              );

  Usplitter_to_complex_1 : splitter_to_complex
    PORT MAP( in_stream => splitter_bank_out1,  -- uint8 [16]
              out_stream_re => splitter_to_complex_out1_re,  -- uint8 [8]
              out_stream_im => splitter_to_complex_out1_im  -- uint8 [8]
              );

  Uul_filter_bank_1 : ul_filter_bank
    PORT MAP( clk => clk,
              wr_data => data_row_7,  -- ufix64
              wr_addr => address_7,  -- uint8
              wr_en => ul_filter_2,  -- ufix3
              rd_addr => filter_address_5,  -- uint8
              coeff_out => ul_filter_bank_out1  -- uint8 [10]
              );

  Uul_filter_3 : ul_filter
    PORT MAP( clk => clk,
              coeffs => ul_filter_bank_out1,  -- uint8 [10]
              stream_in_re => transmitter_out2_re,  -- uint8
              stream_in_im => transmitter_out2_im,  -- uint8
              stream_out_re => ul_filter_out1_re,  -- ufix24
              stream_out_im => ul_filter_out1_im  -- ufix24
              );

  Usplitter_3 : splitter
    PORT MAP( coeffs_re => splitter_to_complex_out1_re,  -- uint8 [8]
              coeffs_im => splitter_to_complex_out1_im,  -- uint8 [8]
              data_in_re => ul_filter_out1_re,  -- ufix24
              data_in_im => ul_filter_out1_im,  -- ufix24
              data_out_re => splitter_out1_re,  -- uint32 [8]
              data_out_im => splitter_out1_im  -- uint32 [8]
              );

  data_row <= unsigned(coeff_input_data_row);

  data_row_1 <= std_logic_vector(data_row);

  address <= unsigned(coeff_input_address);

  address_1 <= std_logic_vector(address);

  combiner <= unsigned(coeff_input_combiner);

  combiner_1 <= std_logic_vector(combiner);

  filter_address <= unsigned(frame_ctrl_out1_filter_address);

  filter_address_1 <= std_logic_vector(filter_address);

  data_row_2 <= unsigned(coeff_input_data_row);

  data_row_3 <= std_logic_vector(data_row_2);

  address_2 <= unsigned(coeff_input_address);

  address_3 <= std_logic_vector(address_2);

  dl_filter_1 <= unsigned(coeff_input_dl_filter);

  dl_filter_2 <= std_logic_vector(dl_filter_1);

  filter_address_2 <= unsigned(frame_ctrl_out1_filter_address);

  filter_address_3 <= std_logic_vector(filter_address_2);

  data_row_4 <= unsigned(coeff_input_data_row);

  data_row_5 <= std_logic_vector(data_row_4);

  address_4 <= unsigned(coeff_input_address);

  address_5 <= std_logic_vector(address_4);

  splitter_1 <= unsigned(coeff_input_splitter);

  splitter_2 <= std_logic_vector(splitter_1);

  dist_address <= unsigned(transmitter_out1_dist_address);

  dist_address_1 <= std_logic_vector(dist_address);

  data_row_6 <= unsigned(coeff_input_data_row);

  data_row_7 <= std_logic_vector(data_row_6);

  address_6 <= unsigned(coeff_input_address);

  address_7 <= std_logic_vector(address_6);

  ul_filter_1 <= unsigned(coeff_input_ul_filter);

  ul_filter_2 <= std_logic_vector(ul_filter_1);

  filter_address_4 <= unsigned(transmitter_out1_filter_address);

  filter_address_5 <= std_logic_vector(filter_address_4);

  fetch_valid <= transmit_fetching_out1_valid;

  fetch_id <= transmit_fetching_out1_id;

  fetch_fn <= transmit_fetching_out1_fn;

  occupy <= transmitter_out3;

  req_out_valid <= frame_ctrl_out1_valid;

  req_out_SEND <= frame_ctrl_out1_SEND;

  req_out_UC <= frame_ctrl_out1_UC;

  req_out_filter_address <= frame_ctrl_out1_filter_address;

  req_out_dist_address <= frame_ctrl_out1_dist_address;

  req_out_id <= frame_ctrl_out1_id;

  req_out_fn <= frame_ctrl_out1_fn;

  dl_stream_re <= combining_out1_re;

  dl_stream_im <= combining_out1_im;

  UC_stream_re <= combining_out2_re;

  UC_stream_im <= combining_out2_im;

  errors_id_not_found_valid <= request_buffer_out2_id_not_found_val;

  errors_id_not_found_id <= request_buffer_out2_id_not_found_id;

  errors_mem_full <= request_buffer_out2_mem_full;

  errors_overlap <= request_buffer_out2_overlap;

  antenna_ul_re <= splitter_out1_re;

  antenna_ul_im <= splitter_out1_im;

END rtl;


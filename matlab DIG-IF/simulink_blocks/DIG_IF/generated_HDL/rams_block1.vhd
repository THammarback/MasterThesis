-- -------------------------------------------------------------
-- 

-- File Name: E:\Downloads\2021b-10mayFINAL\2021b-10mayFINAL\srcFiles\DIG_IF\hdlsrc\DIG_IF_test\rams_block1.vhd
-- Created: 2022-05-10 17:23:04
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rams_block1
-- Source Path: DIG_IF_test/DIG_IF/request_buffer/rams
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY rams_block1 IS
  PORT( clk                               :   IN    std_logic;
        wr_din_UC                         :   IN    std_logic;
        wr_din_SEND                       :   IN    std_logic;
        wr_din_fn                         :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        wr_din_filter_address             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        wr_din_dist_address               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        wr_din_ss                         :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        wr_addr                           :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
        wr_en                             :   IN    std_logic;
        rd_addr                           :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
        rd_dout_UC                        :   OUT   std_logic;
        rd_dout_SEND                      :   OUT   std_logic;
        rd_dout_fn                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        rd_dout_filter_address            :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        rd_dout_dist_address              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        rd_dout_ss                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END rams_block1;


ARCHITECTURE rtl OF rams_block1 IS

  -- Component Declarations
  COMPONENT SimpleDualPortRAM_singlebit
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          wr_din                          :   IN    std_logic;
          wr_addr : IN std_logic_vector(AddrWidth - 1 DOWNTO 0); -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr : IN std_logic_vector(AddrWidth - 1 DOWNTO 0); -- generic width
          rd_dout                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          wr_din : IN std_logic_vector(DataWidth - 1 DOWNTO 0); -- generic width
          wr_addr : IN std_logic_vector(AddrWidth - 1 DOWNTO 0); -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr : IN std_logic_vector(AddrWidth - 1 DOWNTO 0); -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : SimpleDualPortRAM_singlebit
    USE ENTITY work.SimpleDualPortRAM_singlebit(rtl);

  FOR ALL : SimpleDualPortRAM_generic
    USE ENTITY work.SimpleDualPortRAM_generic(rtl);

  -- Signals
  SIGNAL UC                               : std_logic;
  SIGNAL wr_addr_1                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL wr_addr_2                        : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL wr_en_1                          : std_logic;
  SIGNAL rd_addr_1                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL rd_addr_2                        : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL UC_1                             : std_logic;
  SIGNAL SEND                             : std_logic;
  SIGNAL wr_addr_3                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL wr_addr_4                        : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL wr_en_2                          : std_logic;
  SIGNAL rd_addr_3                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL rd_addr_4                        : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL SEND_1                           : std_logic;
  SIGNAL fn                               : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL fn_1                             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL wr_addr_5                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL wr_addr_6                        : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL wr_en_3                          : std_logic;
  SIGNAL rd_addr_5                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL rd_addr_6                        : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL fn_2                             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL filter_address                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL filter_address_1                 : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_7                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL wr_addr_8                        : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL wr_en_4                          : std_logic;
  SIGNAL rd_addr_7                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL rd_addr_8                        : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL filter_address_2                 : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL dist_address                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL dist_address_1                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL wr_addr_9                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL wr_addr_10                       : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL wr_en_5                          : std_logic;
  SIGNAL rd_addr_9                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL rd_addr_10                       : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL dist_address_2                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL ss                               : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL ss_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL wr_addr_11                       : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL wr_addr_12                       : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL wr_en_6                          : std_logic;
  SIGNAL rd_addr_11                       : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL rd_addr_12                       : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL ss_2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  USimple_Dual_Port_RAM7 : SimpleDualPortRAM_singlebit
    GENERIC MAP( AddrWidth => 6,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              wr_din => UC,
              wr_addr => wr_addr_2,
              wr_en => wr_en_1,
              rd_addr => rd_addr_2,
              rd_dout => UC_1
              );

  USimple_Dual_Port_RAM4 : SimpleDualPortRAM_singlebit
    GENERIC MAP( AddrWidth => 6,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              wr_din => SEND,
              wr_addr => wr_addr_4,
              wr_en => wr_en_2,
              rd_addr => rd_addr_4,
              rd_dout => SEND_1
              );

  USimple_Dual_Port_RAM3 : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 6,
                 DataWidth => 16
                 )
    PORT MAP( clk => clk,
              wr_din => fn_1,
              wr_addr => wr_addr_6,
              wr_en => wr_en_3,
              rd_addr => rd_addr_6,
              rd_dout => fn_2
              );

  USimple_Dual_Port_RAM1 : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 6,
                 DataWidth => 8
                 )
    PORT MAP( clk => clk,
              wr_din => filter_address_1,
              wr_addr => wr_addr_8,
              wr_en => wr_en_4,
              rd_addr => rd_addr_8,
              rd_dout => filter_address_2
              );

  USimple_Dual_Port_RAM : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 6,
                 DataWidth => 8
                 )
    PORT MAP( clk => clk,
              wr_din => dist_address_1,
              wr_addr => wr_addr_10,
              wr_en => wr_en_5,
              rd_addr => rd_addr_10,
              rd_dout => dist_address_2
              );

  USimple_Dual_Port_RAM9 : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 6,
                 DataWidth => 32
                 )
    PORT MAP( clk => clk,
              wr_din => ss_1,
              wr_addr => wr_addr_12,
              wr_en => wr_en_6,
              rd_addr => rd_addr_12,
              rd_dout => ss_2
              );

  UC <= wr_din_UC;

  wr_addr_1 <= unsigned(wr_addr);

  wr_addr_2 <= std_logic_vector(wr_addr_1);

  wr_en_1 <= wr_en;

  rd_addr_1 <= unsigned(rd_addr);

  rd_addr_2 <= std_logic_vector(rd_addr_1);

  SEND <= wr_din_SEND;

  wr_addr_3 <= unsigned(wr_addr);

  wr_addr_4 <= std_logic_vector(wr_addr_3);

  wr_en_2 <= wr_en;

  rd_addr_3 <= unsigned(rd_addr);

  rd_addr_4 <= std_logic_vector(rd_addr_3);

  fn <= unsigned(wr_din_fn);

  fn_1 <= std_logic_vector(fn);

  wr_addr_5 <= unsigned(wr_addr);

  wr_addr_6 <= std_logic_vector(wr_addr_5);

  wr_en_3 <= wr_en;

  rd_addr_5 <= unsigned(rd_addr);

  rd_addr_6 <= std_logic_vector(rd_addr_5);

  filter_address <= unsigned(wr_din_filter_address);

  filter_address_1 <= std_logic_vector(filter_address);

  wr_addr_7 <= unsigned(wr_addr);

  wr_addr_8 <= std_logic_vector(wr_addr_7);

  wr_en_4 <= wr_en;

  rd_addr_7 <= unsigned(rd_addr);

  rd_addr_8 <= std_logic_vector(rd_addr_7);

  dist_address <= unsigned(wr_din_dist_address);

  dist_address_1 <= std_logic_vector(dist_address);

  wr_addr_9 <= unsigned(wr_addr);

  wr_addr_10 <= std_logic_vector(wr_addr_9);

  wr_en_5 <= wr_en;

  rd_addr_9 <= unsigned(rd_addr);

  rd_addr_10 <= std_logic_vector(rd_addr_9);

  ss <= unsigned(wr_din_ss);

  ss_1 <= std_logic_vector(ss);

  wr_addr_11 <= unsigned(wr_addr);

  wr_addr_12 <= std_logic_vector(wr_addr_11);

  wr_en_6 <= wr_en;

  rd_addr_11 <= unsigned(rd_addr);

  rd_addr_12 <= std_logic_vector(rd_addr_11);

  rd_dout_UC <= UC_1;

  rd_dout_SEND <= SEND_1;

  rd_dout_fn <= fn_2;

  rd_dout_filter_address <= filter_address_2;

  rd_dout_dist_address <= dist_address_2;

  rd_dout_ss <= ss_2;

END rtl;


-- -------------------------------------------------------------
-- 
-- File Name: E:\Downloads\2021b-10mayFINAL\2021b-10mayFINAL\srcFiles\DIG_IF\hdlsrc\DIG_IF_test\ts_ctrl.vhd
-- Created: 2022-05-10 17:23:04
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ts_ctrl
-- Source Path: DIG_IF_test/DIG_IF/request_buffer/request_orderer/ts_ctrl
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DIG_IF_pac.ALL;

ENTITY ts_ctrl IS
  PORT( clk                               :   IN    std_logic;
        write_ts_bus_available_valid      :   IN    std_logic;
        write_ts_bus_available_address    :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
        write_ts_bus_ts                   :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        ti                                :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        read_bus_address                  :   OUT   std_logic_vector(5 DOWNTO 0);  -- ufix6
        read_bus_valid                    :   OUT   std_logic
        );
END ts_ctrl;


ARCHITECTURE rtl OF ts_ctrl IS

  -- Component Declarations
  COMPONENT find_ti_index
    PORT( ts                              :   IN    vector_of_std_logic_vector32(0 TO 63);  -- uint32 [64]
          ti                              :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          address                         :   OUT   std_logic_vector(5 DOWNTO 0);  -- ufix6
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : find_ti_index
    USE ENTITY work.find_ti_index(rtl);

  -- Signals
  SIGNAL valid                            : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL ts                               : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL address                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Data_Type_Conversion_out1        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out1 : vector_of_unsigned32(0 TO 63) := (OTHERS => to_unsigned(0, 32)); -- uint32 [64]
  SIGNAL Assignment_out1                  : vector_of_unsigned32(0 TO 63);  -- uint32 [64]
  SIGNAL Switch_out1                      : vector_of_unsigned32(0 TO 63);  -- uint32 [64]
  SIGNAL Switch_out1_1                    : vector_of_std_logic_vector32(0 TO 63);  -- ufix32 [64]
  SIGNAL address_1                        : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL valid_1                          : std_logic;

BEGIN
  Ufind_ti_index_1 : find_ti_index
    PORT MAP( ts => Switch_out1_1,  -- uint32 [64]
              ti => ti,  -- uint32
              address => address_1,  -- ufix6
              valid => valid_1
              );

  valid <= write_ts_bus_available_valid;

  
  switch_compare_1 <= '1' WHEN valid > '0' ELSE
      '0';

  ts <= unsigned(write_ts_bus_ts);

  address <= unsigned(write_ts_bus_available_address);

  Data_Type_Conversion_out1 <= resize(address, 8);

  
  Assignment_out1(0) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#00#, 8) ELSE
      Delay_out1(0);
  
  Assignment_out1(1) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#01#, 8) ELSE
      Delay_out1(1);
  
  Assignment_out1(2) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#02#, 8) ELSE
      Delay_out1(2);
  
  Assignment_out1(3) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#03#, 8) ELSE
      Delay_out1(3);
  
  Assignment_out1(4) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#04#, 8) ELSE
      Delay_out1(4);
  
  Assignment_out1(5) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#05#, 8) ELSE
      Delay_out1(5);
  
  Assignment_out1(6) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#06#, 8) ELSE
      Delay_out1(6);
  
  Assignment_out1(7) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#07#, 8) ELSE
      Delay_out1(7);
  
  Assignment_out1(8) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#08#, 8) ELSE
      Delay_out1(8);
  
  Assignment_out1(9) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#09#, 8) ELSE
      Delay_out1(9);
  
  Assignment_out1(10) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#0A#, 8) ELSE
      Delay_out1(10);
  
  Assignment_out1(11) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#0B#, 8) ELSE
      Delay_out1(11);
  
  Assignment_out1(12) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#0C#, 8) ELSE
      Delay_out1(12);
  
  Assignment_out1(13) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#0D#, 8) ELSE
      Delay_out1(13);
  
  Assignment_out1(14) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#0E#, 8) ELSE
      Delay_out1(14);
  
  Assignment_out1(15) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#0F#, 8) ELSE
      Delay_out1(15);
  
  Assignment_out1(16) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#10#, 8) ELSE
      Delay_out1(16);
  
  Assignment_out1(17) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#11#, 8) ELSE
      Delay_out1(17);
  
  Assignment_out1(18) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#12#, 8) ELSE
      Delay_out1(18);
  
  Assignment_out1(19) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#13#, 8) ELSE
      Delay_out1(19);
  
  Assignment_out1(20) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#14#, 8) ELSE
      Delay_out1(20);
  
  Assignment_out1(21) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#15#, 8) ELSE
      Delay_out1(21);
  
  Assignment_out1(22) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#16#, 8) ELSE
      Delay_out1(22);
  
  Assignment_out1(23) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#17#, 8) ELSE
      Delay_out1(23);
  
  Assignment_out1(24) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#18#, 8) ELSE
      Delay_out1(24);
  
  Assignment_out1(25) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#19#, 8) ELSE
      Delay_out1(25);
  
  Assignment_out1(26) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#1A#, 8) ELSE
      Delay_out1(26);
  
  Assignment_out1(27) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#1B#, 8) ELSE
      Delay_out1(27);
  
  Assignment_out1(28) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#1C#, 8) ELSE
      Delay_out1(28);
  
  Assignment_out1(29) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#1D#, 8) ELSE
      Delay_out1(29);
  
  Assignment_out1(30) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#1E#, 8) ELSE
      Delay_out1(30);
  
  Assignment_out1(31) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#1F#, 8) ELSE
      Delay_out1(31);
  
  Assignment_out1(32) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#20#, 8) ELSE
      Delay_out1(32);
  
  Assignment_out1(33) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#21#, 8) ELSE
      Delay_out1(33);
  
  Assignment_out1(34) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#22#, 8) ELSE
      Delay_out1(34);
  
  Assignment_out1(35) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#23#, 8) ELSE
      Delay_out1(35);
  
  Assignment_out1(36) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#24#, 8) ELSE
      Delay_out1(36);
  
  Assignment_out1(37) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#25#, 8) ELSE
      Delay_out1(37);
  
  Assignment_out1(38) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#26#, 8) ELSE
      Delay_out1(38);
  
  Assignment_out1(39) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#27#, 8) ELSE
      Delay_out1(39);
  
  Assignment_out1(40) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#28#, 8) ELSE
      Delay_out1(40);
  
  Assignment_out1(41) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#29#, 8) ELSE
      Delay_out1(41);
  
  Assignment_out1(42) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#2A#, 8) ELSE
      Delay_out1(42);
  
  Assignment_out1(43) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#2B#, 8) ELSE
      Delay_out1(43);
  
  Assignment_out1(44) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#2C#, 8) ELSE
      Delay_out1(44);
  
  Assignment_out1(45) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#2D#, 8) ELSE
      Delay_out1(45);
  
  Assignment_out1(46) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#2E#, 8) ELSE
      Delay_out1(46);
  
  Assignment_out1(47) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#2F#, 8) ELSE
      Delay_out1(47);
  
  Assignment_out1(48) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#30#, 8) ELSE
      Delay_out1(48);
  
  Assignment_out1(49) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#31#, 8) ELSE
      Delay_out1(49);
  
  Assignment_out1(50) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#32#, 8) ELSE
      Delay_out1(50);
  
  Assignment_out1(51) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#33#, 8) ELSE
      Delay_out1(51);
  
  Assignment_out1(52) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#34#, 8) ELSE
      Delay_out1(52);
  
  Assignment_out1(53) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#35#, 8) ELSE
      Delay_out1(53);
  
  Assignment_out1(54) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#36#, 8) ELSE
      Delay_out1(54);
  
  Assignment_out1(55) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#37#, 8) ELSE
      Delay_out1(55);
  
  Assignment_out1(56) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#38#, 8) ELSE
      Delay_out1(56);
  
  Assignment_out1(57) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#39#, 8) ELSE
      Delay_out1(57);
  
  Assignment_out1(58) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#3A#, 8) ELSE
      Delay_out1(58);
  
  Assignment_out1(59) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#3B#, 8) ELSE
      Delay_out1(59);
  
  Assignment_out1(60) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#3C#, 8) ELSE
      Delay_out1(60);
  
  Assignment_out1(61) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#3D#, 8) ELSE
      Delay_out1(61);
  
  Assignment_out1(62) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#3E#, 8) ELSE
      Delay_out1(62);
  
  Assignment_out1(63) <= ts WHEN Data_Type_Conversion_out1 = to_unsigned(16#3F#, 8) ELSE
      Delay_out1(63);

  Delay_rsvd_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      Delay_out1 <= Switch_out1;
    END IF;
  END PROCESS Delay_rsvd_process;


  
  Switch_out1 <= Delay_out1 WHEN switch_compare_1 = '0' ELSE
      Assignment_out1;

  outputgen: FOR kk IN 0 TO 63 GENERATE
    Switch_out1_1(kk) <= std_logic_vector(Switch_out1(kk));
  END GENERATE;

  read_bus_address <= address_1;

  read_bus_valid <= valid_1;

END rtl;


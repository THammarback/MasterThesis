-- -------------------------------------------------------------
-- 
-- File Name: E:\Downloads\2021b-10mayFINAL\2021b-10mayFINAL\srcFiles\DIG_IF\hdlsrc\DIG_IF_test\filter.vhd
-- Created: 2022-05-10 17:23:04
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: filter
-- Source Path: DIG_IF_test/DIG_IF/dl_filter/filters/filter
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY filter IS
  PORT( clk                               :   IN    std_logic;
        stream_in_re                      :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        stream_in_im                      :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        s_1                               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        a_2_1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        a_3_1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        b_2_1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        b_3_1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        s_2                               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        a_2_2                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        a_3_2                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        b_2_2                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        b_3_2                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        stream_out_re                     :   OUT   std_logic_vector(19 DOWNTO 0);  -- ufix20
        stream_out_im                     :   OUT   std_logic_vector(19 DOWNTO 0)  -- ufix20
        );
END filter;


ARCHITECTURE rtl OF filter IS

  -- Signals
  SIGNAL stream_in_re_unsigned            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL stream_in_im_unsigned            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL s_1_unsigned                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL ss_1_Re                          : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL ss_1_Im                          : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL a_2_1_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL a_3_1_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay21_out1_im                  : unsigned(11 DOWNTO 0) := to_unsigned(16#000#, 12);  -- ufix12
  SIGNAL aa_3_1_Im                        : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL Delay11_out1_re                  : unsigned(11 DOWNTO 0) := to_unsigned(16#000#, 12);  -- ufix12
  SIGNAL Delay11_out1_im                  : unsigned(11 DOWNTO 0) := to_unsigned(16#000#, 12);  -- ufix12
  SIGNAL Delay21_out1_re                  : unsigned(11 DOWNTO 0) := to_unsigned(16#000#, 12);  -- ufix12
  SIGNAL aa_3_1_Re                        : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL aa_2_1_Im                        : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL SumA31_out1_re                   : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL SumA31_out1_im                   : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL aa_2_1_Re                        : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL SumA21_sub_temp                  : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL SumA21_sub_temp_1                : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL SumA21_out1_re                   : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL SumA21_out1_im                   : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL SumA31_sub_temp                  : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL SumA31_sub_temp_1                : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL b_2_1_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bb_2_1_Re                        : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL bb_2_1_Im                        : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL SumB21_add_temp                  : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL SumB21_add_temp_1                : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL SumB21_out1_re                   : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL SumB21_out1_im                   : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL b_3_1_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bb_3_1_Re                        : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL bb_3_1_Im                        : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL SumB31_add_temp                  : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL SumB31_add_temp_1                : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL SumB31_out1_re                   : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL SumB31_out1_im                   : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL s_2_unsigned                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL ss_2_Re                          : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL ss_2_Im                          : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL a_2_2_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL a_3_2_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_im                   : unsigned(19 DOWNTO 0) := to_unsigned(16#00000#, 20);  -- ufix20
  SIGNAL aa_3_2_Im                        : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Delay1_out1_re                   : unsigned(19 DOWNTO 0) := to_unsigned(16#00000#, 20);  -- ufix20
  SIGNAL Delay1_out1_im                   : unsigned(19 DOWNTO 0) := to_unsigned(16#00000#, 20);  -- ufix20
  SIGNAL Delay2_out1_re                   : unsigned(19 DOWNTO 0) := to_unsigned(16#00000#, 20);  -- ufix20
  SIGNAL aa_3_2_Re                        : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL aa_2_2_Im                        : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL SumA2_out1_re                    : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL SumA2_out1_im                    : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL aa_2_2_Re                        : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL SumA1_sub_temp                   : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL SumA1_sub_temp_1                 : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL SumA1_out1_re                    : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL SumA1_out1_im                    : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL SumA2_sub_temp                   : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL SumA2_sub_temp_1                 : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL b_3_2_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bb_2_2_Re                        : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL bb_2_2_Im                        : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL SumB1_add_temp                   : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL SumB1_add_temp_1                 : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL SumB1_out1_re                    : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL SumB1_out1_im                    : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL b_2_2_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bb_3_2_Re                        : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL bb_3_2_Im                        : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL SumB2_add_temp                   : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL SumB2_add_temp_1                 : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL SumB2_out1_re                    : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL SumB2_out1_im                    : unsigned(19 DOWNTO 0);  -- ufix20

BEGIN
  stream_in_re_unsigned <= unsigned(stream_in_re);

  s_1_unsigned <= unsigned(s_1);

  ss_1_Re <= stream_in_re_unsigned * s_1_unsigned;

  stream_in_im_unsigned <= unsigned(stream_in_im);

  ss_1_Im <= stream_in_im_unsigned * s_1_unsigned;

  a_2_1_unsigned <= unsigned(a_2_1);

  a_3_1_unsigned <= unsigned(a_3_1);

  aa_3_1_Im <= Delay21_out1_im * a_3_1_unsigned;

  Delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      Delay21_out1_re <= Delay11_out1_re;
      Delay21_out1_im <= Delay11_out1_im;
    END IF;
  END PROCESS Delay21_process;


  aa_3_1_Re <= Delay21_out1_re * a_3_1_unsigned;

  aa_2_1_Im <= Delay11_out1_im * a_2_1_unsigned;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      Delay11_out1_re <= SumA31_out1_re;
      Delay11_out1_im <= SumA31_out1_im;
    END IF;
  END PROCESS Delay11_process;


  aa_2_1_Re <= Delay11_out1_re * a_2_1_unsigned;

  SumA21_sub_temp <= signed(resize(ss_1_Re, 21)) - signed(resize(aa_2_1_Re, 21));
  
  SumA21_out1_re <= "111111111111" WHEN (SumA21_sub_temp(20) = '0') AND (SumA21_sub_temp(19 DOWNTO 12) /= 
    "00000000") ELSE
      "000000000000" WHEN SumA21_sub_temp(20) = '1' ELSE
      unsigned(SumA21_sub_temp(11 DOWNTO 0));
  SumA21_sub_temp_1 <= signed(resize(ss_1_Im, 21)) - signed(resize(aa_2_1_Im, 21));
  
  SumA21_out1_im <= "111111111111" WHEN (SumA21_sub_temp_1(20) = '0') AND (SumA21_sub_temp_1(19 DOWNTO 12) /= 
    "00000000") ELSE
      "000000000000" WHEN SumA21_sub_temp_1(20) = '1' ELSE
      unsigned(SumA21_sub_temp_1(11 DOWNTO 0));

  SumA31_sub_temp <= signed(resize(SumA21_out1_re, 21)) - signed(resize(aa_3_1_Re, 21));
  
  SumA31_out1_re <= "111111111111" WHEN (SumA31_sub_temp(20) = '0') AND (SumA31_sub_temp(19 DOWNTO 12) /= 
    "00000000") ELSE
      "000000000000" WHEN SumA31_sub_temp(20) = '1' ELSE
      unsigned(SumA31_sub_temp(11 DOWNTO 0));
  SumA31_sub_temp_1 <= signed(resize(SumA21_out1_im, 21)) - signed(resize(aa_3_1_Im, 21));
  
  SumA31_out1_im <= "111111111111" WHEN (SumA31_sub_temp_1(20) = '0') AND (SumA31_sub_temp_1(19 DOWNTO 12) /= 
    "00000000") ELSE
      "000000000000" WHEN SumA31_sub_temp_1(20) = '1' ELSE
      unsigned(SumA31_sub_temp_1(11 DOWNTO 0));

  b_2_1_unsigned <= unsigned(b_2_1);

  bb_2_1_Re <= Delay11_out1_re * b_2_1_unsigned;

  bb_2_1_Im <= Delay11_out1_im * b_2_1_unsigned;

  SumB21_add_temp <= resize(SumA31_out1_re, 21) + resize(bb_2_1_Re, 21);
  
  SumB21_out1_re <= "111111111111" WHEN SumB21_add_temp(20 DOWNTO 12) /= "000000000" ELSE
      SumB21_add_temp(11 DOWNTO 0);
  SumB21_add_temp_1 <= resize(SumA31_out1_im, 21) + resize(bb_2_1_Im, 21);
  
  SumB21_out1_im <= "111111111111" WHEN SumB21_add_temp_1(20 DOWNTO 12) /= "000000000" ELSE
      SumB21_add_temp_1(11 DOWNTO 0);

  b_3_1_unsigned <= unsigned(b_3_1);

  bb_3_1_Re <= Delay21_out1_re * b_3_1_unsigned;

  bb_3_1_Im <= Delay21_out1_im * b_3_1_unsigned;

  SumB31_add_temp <= resize(SumB21_out1_re, 21) + resize(bb_3_1_Re, 21);
  
  SumB31_out1_re <= "111111111111" WHEN SumB31_add_temp(20 DOWNTO 12) /= "000000000" ELSE
      SumB31_add_temp(11 DOWNTO 0);
  SumB31_add_temp_1 <= resize(SumB21_out1_im, 21) + resize(bb_3_1_Im, 21);
  
  SumB31_out1_im <= "111111111111" WHEN SumB31_add_temp_1(20 DOWNTO 12) /= "000000000" ELSE
      SumB31_add_temp_1(11 DOWNTO 0);

  s_2_unsigned <= unsigned(s_2);

  ss_2_Re <= SumB31_out1_re * s_2_unsigned;

  ss_2_Im <= SumB31_out1_im * s_2_unsigned;

  a_2_2_unsigned <= unsigned(a_2_2);

  a_3_2_unsigned <= unsigned(a_3_2);

  aa_3_2_Im <= Delay2_out1_im * a_3_2_unsigned;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      Delay2_out1_re <= Delay1_out1_re;
      Delay2_out1_im <= Delay1_out1_im;
    END IF;
  END PROCESS Delay2_process;


  aa_3_2_Re <= Delay2_out1_re * a_3_2_unsigned;

  aa_2_2_Im <= Delay1_out1_im * a_2_2_unsigned;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      Delay1_out1_re <= SumA2_out1_re;
      Delay1_out1_im <= SumA2_out1_im;
    END IF;
  END PROCESS Delay1_process;


  aa_2_2_Re <= Delay1_out1_re * a_2_2_unsigned;

  SumA1_sub_temp <= signed(resize(ss_2_Re, 29)) - signed(resize(aa_2_2_Re, 29));
  
  SumA1_out1_re <= X"FFFFF" WHEN (SumA1_sub_temp(28) = '0') AND (SumA1_sub_temp(27 DOWNTO 20) /= "00000000") 
    ELSE
      X"00000" WHEN SumA1_sub_temp(28) = '1' ELSE
      unsigned(SumA1_sub_temp(19 DOWNTO 0));
  SumA1_sub_temp_1 <= signed(resize(ss_2_Im, 29)) - signed(resize(aa_2_2_Im, 29));
  
  SumA1_out1_im <= X"FFFFF" WHEN (SumA1_sub_temp_1(28) = '0') AND (SumA1_sub_temp_1(27 DOWNTO 20) /= 
    "00000000") ELSE
      X"00000" WHEN SumA1_sub_temp_1(28) = '1' ELSE
      unsigned(SumA1_sub_temp_1(19 DOWNTO 0));

  SumA2_sub_temp <= signed(resize(SumA1_out1_re, 29)) - signed(resize(aa_3_2_Re, 29));
  
  SumA2_out1_re <= X"FFFFF" WHEN (SumA2_sub_temp(28) = '0') AND (SumA2_sub_temp(27 DOWNTO 20) /= "00000000") 
    ELSE
      X"00000" WHEN SumA2_sub_temp(28) = '1' ELSE
      unsigned(SumA2_sub_temp(19 DOWNTO 0));
  SumA2_sub_temp_1 <= signed(resize(SumA1_out1_im, 29)) - signed(resize(aa_3_2_Im, 29));
  
  SumA2_out1_im <= X"FFFFF" WHEN (SumA2_sub_temp_1(28) = '0') AND (SumA2_sub_temp_1(27 DOWNTO 20) /= 
    "00000000") ELSE
      X"00000" WHEN SumA2_sub_temp_1(28) = '1' ELSE
      unsigned(SumA2_sub_temp_1(19 DOWNTO 0));

  b_3_2_unsigned <= unsigned(b_3_2);

  bb_2_2_Re <= Delay1_out1_re * b_3_2_unsigned;

  bb_2_2_Im <= Delay1_out1_im * b_3_2_unsigned;

  SumB1_add_temp <= resize(SumA2_out1_re, 29) + resize(bb_2_2_Re, 29);
  
  SumB1_out1_re <= X"FFFFF" WHEN SumB1_add_temp(28 DOWNTO 20) /= "000000000" ELSE
      SumB1_add_temp(19 DOWNTO 0);
  SumB1_add_temp_1 <= resize(SumA2_out1_im, 29) + resize(bb_2_2_Im, 29);
  
  SumB1_out1_im <= X"FFFFF" WHEN SumB1_add_temp_1(28 DOWNTO 20) /= "000000000" ELSE
      SumB1_add_temp_1(19 DOWNTO 0);

  b_2_2_unsigned <= unsigned(b_2_2);

  bb_3_2_Re <= Delay2_out1_re * b_2_2_unsigned;

  bb_3_2_Im <= Delay2_out1_im * b_2_2_unsigned;

  SumB2_add_temp <= resize(SumB1_out1_re, 29) + resize(bb_3_2_Re, 29);
  
  SumB2_out1_re <= X"FFFFF" WHEN SumB2_add_temp(28 DOWNTO 20) /= "000000000" ELSE
      SumB2_add_temp(19 DOWNTO 0);
  SumB2_add_temp_1 <= resize(SumB1_out1_im, 29) + resize(bb_3_2_Im, 29);
  
  SumB2_out1_im <= X"FFFFF" WHEN SumB2_add_temp_1(28 DOWNTO 20) /= "000000000" ELSE
      SumB2_add_temp_1(19 DOWNTO 0);

  stream_out_re <= std_logic_vector(SumB2_out1_re);

  stream_out_im <= std_logic_vector(SumB2_out1_im);

END rtl;


-- -------------------------------------------------------------
-- 
-- File Name: E:\Downloads\2021b-10mayFINAL\2021b-10mayFINAL\srcFiles\DIG_IF\hdlsrc\DIG_IF_test\frame_ctrl.vhd
-- Created: 2022-05-10 17:23:04
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: frame_ctrl
-- Source Path: DIG_IF_test/DIG_IF/frame_ctrl
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY frame_ctrl IS
  PORT( clk                               :   IN    std_logic;
        ti                                :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        req_in_req_UC                     :   IN    std_logic;
        req_in_req_SEND                   :   IN    std_logic;
        req_in_req_fn                     :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        req_in_req_filter_address         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        req_in_req_dist_address           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        req_in_req_ss                     :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        req_in_id                         :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        req_in_valid                      :   IN    std_logic;
        req_out_valid                     :   OUT   std_logic;
        req_out_SEND                      :   OUT   std_logic;
        req_out_UC                        :   OUT   std_logic;
        req_out_filter_address            :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        req_out_dist_address              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        req_out_id                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        req_out_fn                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        busy                              :   OUT   std_logic
        );
END frame_ctrl;


ARCHITECTURE rtl OF frame_ctrl IS

  -- Signals
  SIGNAL ti_unsigned                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL valid                            : std_logic;
  SIGNAL NOT1_out1                        : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL ss                               : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay_out1                       : unsigned(31 DOWNTO 0) := to_unsigned(0, 32);  -- uint32
  SIGNAL Less_Than2_relop1                : std_logic;
  SIGNAL Equal_relop1                     : std_logic;
  SIGNAL valid_1                          : std_logic;
  SIGNAL Less_Than1_relop1                : std_logic;
  SIGNAL AND2_out1                        : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL SEND                             : std_logic;
  SIGNAL SEND_1                           : std_logic;
  SIGNAL Delay2_out1                      : std_logic := '0';
  SIGNAL SEND_2                           : std_logic;
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL UC                               : std_logic;
  SIGNAL UC_1                             : std_logic;
  SIGNAL Delay1_out1                      : std_logic := '0';
  SIGNAL UC_2                             : std_logic;
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL filter_address                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL filter_address_1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay4_out1                      : unsigned(7 DOWNTO 0) := to_unsigned(16#00#, 8);  -- uint8
  SIGNAL Switch4_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL dist_address                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL dist_address_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out1                      : unsigned(7 DOWNTO 0) := to_unsigned(16#00#, 8);  -- uint8
  SIGNAL Switch3_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL id                               : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL id_1                             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay5_out1                      : unsigned(15 DOWNTO 0) := to_unsigned(16#0000#, 16);  -- uint16
  SIGNAL id_2                             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL fn                               : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL fn_1                             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay6_out1                      : unsigned(15 DOWNTO 0) := to_unsigned(16#0000#, 16);  -- uint16
  SIGNAL fn_2                             : unsigned(15 DOWNTO 0);  -- uint16

BEGIN
  ti_unsigned <= unsigned(ti);

  valid <= req_in_valid;

  NOT1_out1 <=  NOT valid;

  
  switch_compare_1 <= '1' WHEN NOT1_out1 > '0' ELSE
      '0';

  ss <= unsigned(req_in_req_ss);

  Delay_rsvd_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      Delay_out1 <= Switch_out1;
    END IF;
  END PROCESS Delay_rsvd_process;


  
  Switch_out1 <= ss WHEN switch_compare_1 = '0' ELSE
      Delay_out1;

  
  Less_Than2_relop1 <= '1' WHEN ti_unsigned < Switch_out1 ELSE
      '0';

  
  Equal_relop1 <= '1' WHEN ti_unsigned = Switch_out1 ELSE
      '0';

  valid_1 <= Less_Than2_relop1 OR Equal_relop1;

  
  Less_Than1_relop1 <= '1' WHEN ti_unsigned <= Delay_out1 ELSE
      '0';

  AND2_out1 <= valid_1 AND Less_Than1_relop1;

  
  switch_compare_1_1 <= '1' WHEN AND2_out1 > '0' ELSE
      '0';

  SEND <= req_in_req_SEND;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      Delay2_out1 <= SEND_1;
    END IF;
  END PROCESS Delay2_process;


  
  SEND_2 <= SEND WHEN switch_compare_1_1 = '0' ELSE
      Delay2_out1;

  
  SEND_1 <= '1' WHEN SEND_2 /= '0' ELSE
      '0';

  
  switch_compare_1_2 <= '1' WHEN AND2_out1 > '0' ELSE
      '0';

  UC <= req_in_req_UC;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      Delay1_out1 <= UC_1;
    END IF;
  END PROCESS Delay1_process;


  
  UC_2 <= UC WHEN switch_compare_1_2 = '0' ELSE
      Delay1_out1;

  
  UC_1 <= '1' WHEN UC_2 /= '0' ELSE
      '0';

  
  switch_compare_1_3 <= '1' WHEN AND2_out1 > '0' ELSE
      '0';

  filter_address <= unsigned(req_in_req_filter_address);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      Delay4_out1 <= filter_address_1;
    END IF;
  END PROCESS Delay4_process;


  
  Switch4_out1 <= filter_address WHEN switch_compare_1_3 = '0' ELSE
      Delay4_out1;

  filter_address_1 <= Switch4_out1;

  req_out_filter_address <= std_logic_vector(filter_address_1);

  
  switch_compare_1_4 <= '1' WHEN AND2_out1 > '0' ELSE
      '0';

  dist_address <= unsigned(req_in_req_dist_address);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      Delay3_out1 <= dist_address_1;
    END IF;
  END PROCESS Delay3_process;


  
  Switch3_out1 <= dist_address WHEN switch_compare_1_4 = '0' ELSE
      Delay3_out1;

  dist_address_1 <= Switch3_out1;

  req_out_dist_address <= std_logic_vector(dist_address_1);

  
  switch_compare_1_5 <= '1' WHEN AND2_out1 > '0' ELSE
      '0';

  id <= unsigned(req_in_id);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      Delay5_out1 <= id_1;
    END IF;
  END PROCESS Delay5_process;


  
  id_2 <= id WHEN switch_compare_1_5 = '0' ELSE
      Delay5_out1;

  id_1 <= id_2;

  req_out_id <= std_logic_vector(id_1);

  
  switch_compare_1_6 <= '1' WHEN AND2_out1 > '0' ELSE
      '0';

  fn <= unsigned(req_in_req_fn);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      Delay6_out1 <= fn_1;
    END IF;
  END PROCESS Delay6_process;


  
  fn_2 <= fn WHEN switch_compare_1_6 = '0' ELSE
      Delay6_out1;

  fn_1 <= fn_2;

  req_out_fn <= std_logic_vector(fn_1);

  req_out_valid <= valid_1;

  req_out_SEND <= SEND_1;

  req_out_UC <= UC_1;

  busy <= Less_Than2_relop1;

END rtl;


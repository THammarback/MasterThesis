-- -------------------------------------------------------------
-- 

-- File Name: E:\Downloads\2021b-10mayFINAL\2021b-10mayFINAL\srcFiles\coeff_bank\hdlsrc\coeff_bank_integration_test\multiple_rams_block.vhd
-- Created: 2022-05-13 10:10:53
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: multiple_rams_block
-- Source Path: coeff_bank_integration_test/coeff_bank/dl_filter_bank/multiple_rams
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.coeff_bank_pac.ALL;

ENTITY multiple_rams_block IS
  PORT( clk                               :   IN    std_logic;
        enb                               :   IN    std_logic;
        wr_data                           :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        wr_addr                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        wr_en                             :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        rd_addr                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        coeff_out                         :   OUT   vector_of_std_logic_vector8(0 TO 9)  -- uint8 [10]
        );
END multiple_rams_block;


ARCHITECTURE rtl OF multiple_rams_block IS

  -- Component Declarations
  COMPONENT rams_block
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_data                         :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          wr_addr                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Out1                            :   OUT   vector_of_std_logic_vector8(0 TO 7)  -- uint8 [8]
          );
  END COMPONENT;

  COMPONENT SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din : IN std_logic_vector(DataWidth - 1 DOWNTO 0); -- generic width
          wr_addr : IN std_logic_vector(AddrWidth - 1 DOWNTO 0); -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr : IN std_logic_vector(AddrWidth - 1 DOWNTO 0); -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT fi_splitter_block3
    PORT( in_word                         :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          out_arr                         :   OUT   vector_of_std_logic_vector8(0 TO 1)  -- uint8 [2]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : rams_block
    USE ENTITY work.rams_block(rtl);

  FOR ALL : SimpleDualPortRAM_generic
    USE ENTITY work.SimpleDualPortRAM_generic(rtl);

  FOR ALL : fi_splitter_block3
    USE ENTITY work.fi_splitter_block3(rtl);

  -- Signals
  SIGNAL wr_en_unsigned                   : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL first_rams_cmps_out1             : std_logic;
  SIGNAL rams_out1                        : vector_of_std_logic_vector8(0 TO 7);  -- ufix8 [8]
  SIGNAL wr_data_unsigned                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Extract_Bits2_out1               : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL last_ram_cmp_out1                : std_logic;
  SIGNAL Simple_Dual_Port_RAM_System_out1 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL out_rsvd                         : vector_of_std_logic_vector8(0 TO 1);  -- ufix8 [2]
  SIGNAL Mux_out1                         : vector_of_std_logic_vector8(0 TO 9);  -- ufix8 [10]

BEGIN
  Urams_instance1 : rams_block
    PORT MAP( clk => clk,
              enb => enb,
              wr_data => wr_data,  -- ufix64
              wr_addr => wr_addr,  -- uint8
              wr_en => first_rams_cmps_out1,
              rd_addr => rd_addr,  -- uint8
              Out1 => rams_out1  -- uint8 [8]
              );

  USimple_Dual_Port_RAM_System_3 : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 16
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(Extract_Bits2_out1),
              wr_addr => wr_addr,
              wr_en => last_ram_cmp_out1,
              rd_addr => rd_addr,
              rd_dout => Simple_Dual_Port_RAM_System_out1
              );

  Ufi_splitter_5 : fi_splitter_block3
    PORT MAP( in_word => Simple_Dual_Port_RAM_System_out1,  -- uint16
              out_arr => out_rsvd  -- uint8 [2]
              );

  wr_en_unsigned <= unsigned(wr_en);

  
  first_rams_cmps_out1 <= '1' WHEN wr_en_unsigned = to_unsigned(16#1#, 3) ELSE
      '0';

  wr_data_unsigned <= unsigned(wr_data);

  Extract_Bits2_out1 <= wr_data_unsigned(63 DOWNTO 48);

  
  last_ram_cmp_out1 <= '1' WHEN wr_en_unsigned = to_unsigned(16#2#, 3) ELSE
      '0';

  Mux_out1(0) <= rams_out1(0);
  Mux_out1(1) <= rams_out1(1);
  Mux_out1(2) <= rams_out1(2);
  Mux_out1(3) <= rams_out1(3);
  Mux_out1(4) <= rams_out1(4);
  Mux_out1(5) <= rams_out1(5);
  Mux_out1(6) <= rams_out1(6);
  Mux_out1(7) <= rams_out1(7);
  Mux_out1(8) <= out_rsvd(0);
  Mux_out1(9) <= out_rsvd(1);

  coeff_out <= Mux_out1;

END rtl;


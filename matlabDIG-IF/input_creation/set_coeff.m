function out = set_coeff(coeff_attribs, address, data)
    load('constants.mat', 'bank_bitwidth', 'coeff_ram_bitwidth', 'dl_filter_attribs', 'ul_filter_attribs', 'combiner_attribs', 'splitter_attribs');
    if(islogical(coeff_attribs) && ~coeff_attribs)
       out = struct( ...
           'type', 'set_coeff', ...
           'address', fi(0, false, bank_bitwidth, 0), ...
           'dl_filter', fi(0, false, dl_filter_attribs.data_rows, 0), ...
           'ul_filter', fi(0, false, ul_filter_attribs.data_rows, 0), ...
           'combiner', fi(0, false, combiner_attribs.data_rows, 0), ...
           'splitter', fi(0, false, splitter_attribs.data_rows, 0), ...
           'data_row', fi(0,false, coeff_ram_bitwidth, 0)); 
    else
        data = cell2mat(data);
        assert(coeff_attribs.coeff_num == numel(data), 'Input "data" must have %i elements, not inserted %i', coeff_attribs.coeff_num, numel(data))
        
        address = fi(address, false, bank_bitwidth, 0);
        if coeff_attribs.complex
            flat_data = zeros(size(data).*[1,2]);
            flat_data(:, 1:2:end) = real(data);
            flat_data(:, 2:2:end) = imag(data);
        else
            flat_data = reshape(data, 1, []);
        end
        data_matrix = reshape([flat_data, zeros(1, mod(-coeff_attribs.coeff_num, coeff_ram_bitwidth/coeff_attribs.coeff_bitwidth))].', [], coeff_attribs.data_rows).';
        fi_data_matrix = fi(data_matrix, false, coeff_attribs.coeff_bitwidth, 0);
        data_rows = arrayfun(@(row_index) bitconcat(fi_data_matrix(row_index,:)), (1:size(fi_data_matrix,1)).');
        
        out = arrayfun(@(i) struct( ...
           'type', 'set_coeff', ...
           'address', fi(address, false, bank_bitwidth, 0), ...
           'dl_filter', isequal(coeff_attribs, dl_filter_attribs).*fi(i, false, dl_filter_attribs.data_rows, 0), ...
           'ul_filter', strcmp(coeff_attribs.name, 'ul_filter').*fi(i, false, ul_filter_attribs.data_rows, 0), ...
           'combiner', strcmp(coeff_attribs.name, 'combiner').*fi(i, false, combiner_attribs.data_rows, 0), ...
           'splitter', strcmp(coeff_attribs.name, 'splitter').*fi(i, false, splitter_attribs.data_rows, 0), ...
           'data_row', data_rows(i)), ...
            1:numel(data_rows));
    end
end


